// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftmsg.proto

#include "raftmsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace raft {
class LogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry>
      _instance;
} _LogEntry_default_instance_;
class LogEntryResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntryResponse>
      _instance;
} _LogEntryResponse_default_instance_;
class PeerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Peer>
      _instance;
} _Peer_default_instance_;
class MemberChangeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemberChangeRequest>
      _instance;
} _MemberChangeRequest_default_instance_;
class MemberChangeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MemberChangeResponse>
      _instance;
} _MemberChangeResponse_default_instance_;
class VoteRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteRequest>
      _instance;
} _VoteRequest_default_instance_;
class VoteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VoteResponse>
      _instance;
} _VoteResponse_default_instance_;
class AppendEntriesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesRequest>
      _instance;
} _AppendEntriesRequest_default_instance_;
class AppendEntriesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesResponse>
      _instance;
} _AppendEntriesResponse_default_instance_;
class RaftMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaftMessage>
      _instance;
  const ::raft::VoteRequest* vt_req_;
  const ::raft::VoteResponse* vt_rsp_;
  const ::raft::AppendEntriesRequest* ae_req_;
  const ::raft::AppendEntriesResponse* ae_rsp_;
  const ::raft::MemberChangeRequest* mc_req_;
  const ::raft::MemberChangeResponse* mc_rsp_;
} _RaftMessage_default_instance_;
}  // namespace raft
namespace protobuf_raftmsg_2eproto {
void InitDefaultsLogEntryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_LogEntry_default_instance_;
    new (ptr) ::raft::LogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::LogEntry::InitAsDefaultInstance();
}

void InitDefaultsLogEntry() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogEntryImpl);
}

void InitDefaultsLogEntryResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_LogEntryResponse_default_instance_;
    new (ptr) ::raft::LogEntryResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::LogEntryResponse::InitAsDefaultInstance();
}

void InitDefaultsLogEntryResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsLogEntryResponseImpl);
}

void InitDefaultsPeerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_Peer_default_instance_;
    new (ptr) ::raft::Peer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::Peer::InitAsDefaultInstance();
}

void InitDefaultsPeer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPeerImpl);
}

void InitDefaultsMemberChangeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_raftmsg_2eproto::InitDefaultsPeer();
  {
    void* ptr = &::raft::_MemberChangeRequest_default_instance_;
    new (ptr) ::raft::MemberChangeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::MemberChangeRequest::InitAsDefaultInstance();
}

void InitDefaultsMemberChangeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMemberChangeRequestImpl);
}

void InitDefaultsMemberChangeResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_raftmsg_2eproto::InitDefaultsPeer();
  {
    void* ptr = &::raft::_MemberChangeResponse_default_instance_;
    new (ptr) ::raft::MemberChangeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::MemberChangeResponse::InitAsDefaultInstance();
}

void InitDefaultsMemberChangeResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMemberChangeResponseImpl);
}

void InitDefaultsVoteRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_VoteRequest_default_instance_;
    new (ptr) ::raft::VoteRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::VoteRequest::InitAsDefaultInstance();
}

void InitDefaultsVoteRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVoteRequestImpl);
}

void InitDefaultsVoteResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_VoteResponse_default_instance_;
    new (ptr) ::raft::VoteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::VoteResponse::InitAsDefaultInstance();
}

void InitDefaultsVoteResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVoteResponseImpl);
}

void InitDefaultsAppendEntriesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_raftmsg_2eproto::InitDefaultsLogEntry();
  {
    void* ptr = &::raft::_AppendEntriesRequest_default_instance_;
    new (ptr) ::raft::AppendEntriesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::AppendEntriesRequest::InitAsDefaultInstance();
}

void InitDefaultsAppendEntriesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAppendEntriesRequestImpl);
}

void InitDefaultsAppendEntriesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::raft::_AppendEntriesResponse_default_instance_;
    new (ptr) ::raft::AppendEntriesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::AppendEntriesResponse::InitAsDefaultInstance();
}

void InitDefaultsAppendEntriesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAppendEntriesResponseImpl);
}

void InitDefaultsRaftMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_raftmsg_2eproto::InitDefaultsVoteRequest();
  protobuf_raftmsg_2eproto::InitDefaultsVoteResponse();
  protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesRequest();
  protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesResponse();
  protobuf_raftmsg_2eproto::InitDefaultsMemberChangeRequest();
  protobuf_raftmsg_2eproto::InitDefaultsMemberChangeResponse();
  {
    void* ptr = &::raft::_RaftMessage_default_instance_;
    new (ptr) ::raft::RaftMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::raft::RaftMessage::InitAsDefaultInstance();
}

void InitDefaultsRaftMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRaftMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntry, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntry, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntryResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::LogEntryResponse, index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Peer, raftid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Peer, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Peer, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::Peer, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::MemberChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::MemberChangeRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::MemberChangeRequest, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::MemberChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::MemberChangeResponse, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::MemberChangeResponse, peer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteRequest, candidate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteRequest, last_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteRequest, last_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::VoteResponse, agree_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesRequest, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesRequest, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesRequest, commit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesRequest, prev_log_term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesRequest, prev_log_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesRequest, entries_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesResponse, nodeid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesResponse, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesResponse, current_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::AppendEntriesResponse, first_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::RaftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::RaftMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::RaftMessage, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::RaftMessage, raftid_),
  offsetof(::raft::RaftMessageDefaultTypeInternal, vt_req_),
  offsetof(::raft::RaftMessageDefaultTypeInternal, vt_rsp_),
  offsetof(::raft::RaftMessageDefaultTypeInternal, ae_req_),
  offsetof(::raft::RaftMessageDefaultTypeInternal, ae_rsp_),
  offsetof(::raft::RaftMessageDefaultTypeInternal, mc_req_),
  offsetof(::raft::RaftMessageDefaultTypeInternal, mc_rsp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::raft::RaftMessage, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::raft::LogEntry)},
  { 9, -1, sizeof(::raft::LogEntryResponse)},
  { 16, -1, sizeof(::raft::Peer)},
  { 25, -1, sizeof(::raft::MemberChangeRequest)},
  { 32, -1, sizeof(::raft::MemberChangeResponse)},
  { 39, -1, sizeof(::raft::VoteRequest)},
  { 48, -1, sizeof(::raft::VoteResponse)},
  { 55, -1, sizeof(::raft::AppendEntriesRequest)},
  { 66, -1, sizeof(::raft::AppendEntriesResponse)},
  { 76, -1, sizeof(::raft::RaftMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_LogEntryResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_Peer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_MemberChangeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_MemberChangeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_VoteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_VoteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_AppendEntriesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_AppendEntriesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::raft::_RaftMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "raftmsg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rraftmsg.proto\022\004raft\"V\n\010LogEntry\022\037\n\004typ"
      "e\030\001 \001(\0162\021.raft.RaftLogType\022\014\n\004term\030\002 \001(\004"
      "\022\r\n\005index\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\"/\n\020LogEntr"
      "yResponse\022\014\n\004term\030\001 \001(\004\022\r\n\005index\030\002 \001(\004\"@"
      "\n\004Peer\022\016\n\006raftid\030\001 \001(\004\022\016\n\006nodeid\030\002 \001(\004\022\n"
      "\n\002ip\030\003 \001(\t\022\014\n\004port\030\004 \001(\r\"P\n\023MemberChange"
      "Request\022\037\n\004type\030\001 \001(\0162\021.raft.RaftLogType"
      "\022\030\n\004peer\030\002 \001(\0132\n.raft.Peer\"<\n\024MemberChan"
      "geResponse\022\n\n\002ok\030\001 \001(\010\022\030\n\004peer\030\002 \001(\0132\n.r"
      "aft.Peer\"U\n\013VoteRequest\022\014\n\004term\030\001 \001(\004\022\021\n"
      "\tcandidate\030\002 \001(\004\022\021\n\tlast_term\030\003 \001(\004\022\022\n\nl"
      "ast_index\030\004 \001(\004\"+\n\014VoteResponse\022\014\n\004term\030"
      "\001 \001(\004\022\r\n\005agree\030\002 \001(\010\"\224\001\n\024AppendEntriesRe"
      "quest\022\016\n\006nodeid\030\001 \001(\004\022\014\n\004term\030\002 \001(\004\022\016\n\006c"
      "ommit\030\003 \001(\004\022\025\n\rprev_log_term\030\004 \001(\004\022\026\n\016pr"
      "ev_log_index\030\005 \001(\004\022\037\n\007entries\030\006 \003(\0132\016.ra"
      "ft.LogEntry\"r\n\025AppendEntriesResponse\022\016\n\006"
      "nodeid\030\001 \001(\004\022\017\n\007success\030\002 \001(\010\022\014\n\004term\030\003 "
      "\001(\004\022\025\n\rcurrent_index\030\004 \001(\004\022\023\n\013first_inde"
      "x\030\005 \001(\004\"\340\004\n\013RaftMessage\022/\n\004type\030\001 \001(\0162!."
      "raft.RaftMessage.RaftMessageType\022\016\n\006raft"
      "id\030\002 \001(\r\022#\n\006vt_req\030\003 \001(\0132\021.raft.VoteRequ"
      "estH\000\022$\n\006vt_rsp\030\004 \001(\0132\022.raft.VoteRespons"
      "eH\000\022,\n\006ae_req\030\005 \001(\0132\032.raft.AppendEntries"
      "RequestH\000\022-\n\006ae_rsp\030\006 \001(\0132\033.raft.AppendE"
      "ntriesResponseH\000\022+\n\006mc_req\030\007 \001(\0132\031.raft."
      "MemberChangeRequestH\000\022,\n\006mc_rsp\030\010 \001(\0132\032."
      "raft.MemberChangeResponseH\000\"\205\002\n\017RaftMess"
      "ageType\022\035\n\031MSGTYPE_HANDSHAKE_REQUEST\020\000\022\036"
      "\n\032MSGTYPE_HANDSHAKE_RESPONSE\020\001\022\030\n\024MSGTYP"
      "E_VOTE_REQUEST\020\002\022\031\n\025MSGTYPE_VOTE_RESPONS"
      "E\020\003\022\035\n\031MSGTYPE_APPENDLOG_REQUEST\020\004\022\036\n\032MS"
      "GTYPE_APPENDLOG_RESPONSE\020\005\022\036\n\032MSGTYPE_CO"
      "NFCHANGE_REQUEST\020\006\022\037\n\033MSGTYPE_CONFCHANGE"
      "_RESPONSE\020\007B\005\n\003msg*p\n\013RaftLogType\022\022\n\016LOG"
      "TYPE_NORMAL\020\000\022\036\n\032LOGTYPE_ADD_NONVOTING_N"
      "ODE\020\001\022\024\n\020LOGTYPE_ADD_NODE\020\002\022\027\n\023LOGTYPE_R"
      "EMOVE_NODE\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raftmsg.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_raftmsg_2eproto
namespace raft {
const ::google::protobuf::EnumDescriptor* RaftMessage_RaftMessageType_descriptor() {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raftmsg_2eproto::file_level_enum_descriptors[0];
}
bool RaftMessage_RaftMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_HANDSHAKE_REQUEST;
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_HANDSHAKE_RESPONSE;
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_VOTE_REQUEST;
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_VOTE_RESPONSE;
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_APPENDLOG_REQUEST;
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_APPENDLOG_RESPONSE;
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_CONFCHANGE_REQUEST;
const RaftMessage_RaftMessageType RaftMessage::MSGTYPE_CONFCHANGE_RESPONSE;
const RaftMessage_RaftMessageType RaftMessage::RaftMessageType_MIN;
const RaftMessage_RaftMessageType RaftMessage::RaftMessageType_MAX;
const int RaftMessage::RaftMessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RaftLogType_descriptor() {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_raftmsg_2eproto::file_level_enum_descriptors[1];
}
bool RaftLogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LogEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kTypeFieldNumber;
const int LogEntry::kTermFieldNumber;
const int LogEntry::kIndexFieldNumber;
const int LogEntry::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsLogEntry();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&term_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raft.LogEntry)
}

void LogEntry::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
  _cached_size_ = 0;
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raft.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntry& LogEntry::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsLogEntry();
  return *internal_default_instance();
}

LogEntry* LogEntry::New(::google::protobuf::Arena* arena) const {
  LogEntry* n = new LogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.LogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft.RaftLogType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raft::RaftLogType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftLogType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // uint64 index = 3;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->index(), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftLogType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // uint64 index = 3;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->index(), target);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.LogEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // .raft.RaftLogType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(term_, other->term_);
  swap(index_, other->index_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LogEntryResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntryResponse::kTermFieldNumber;
const int LogEntryResponse::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntryResponse::LogEntryResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsLogEntryResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.LogEntryResponse)
}
LogEntryResponse::LogEntryResponse(const LogEntryResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:raft.LogEntryResponse)
}

void LogEntryResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(index_));
  _cached_size_ = 0;
}

LogEntryResponse::~LogEntryResponse() {
  // @@protoc_insertion_point(destructor:raft.LogEntryResponse)
  SharedDtor();
}

void LogEntryResponse::SharedDtor() {
}

void LogEntryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogEntryResponse::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntryResponse& LogEntryResponse::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsLogEntryResponse();
  return *internal_default_instance();
}

LogEntryResponse* LogEntryResponse::New(::google::protobuf::Arena* arena) const {
  LogEntryResponse* n = new LogEntryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogEntryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.LogEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

bool LogEntryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.LogEntryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.LogEntryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.LogEntryResponse)
  return false;
#undef DO_
}

void LogEntryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.LogEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.LogEntryResponse)
}

::google::protobuf::uint8* LogEntryResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.LogEntryResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.LogEntryResponse)
  return target;
}

size_t LogEntryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.LogEntryResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogEntryResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.LogEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntryResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntryResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.LogEntryResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.LogEntryResponse)
    MergeFrom(*source);
  }
}

void LogEntryResponse::MergeFrom(const LogEntryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.LogEntryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void LogEntryResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.LogEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryResponse::CopyFrom(const LogEntryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.LogEntryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryResponse::IsInitialized() const {
  return true;
}

void LogEntryResponse::Swap(LogEntryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntryResponse::InternalSwap(LogEntryResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogEntryResponse::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kRaftidFieldNumber;
const int Peer::kNodeidFieldNumber;
const int Peer::kIpFieldNumber;
const int Peer::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsPeer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.Peer)
}
Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&raftid_, &from.raftid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&raftid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:raft.Peer)
}

void Peer::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&raftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&raftid_)) + sizeof(port_));
  _cached_size_ = 0;
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:raft.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Peer& Peer::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsPeer();
  return *internal_default_instance();
}

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&raftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&raftid_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 raftid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &raftid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nodeid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "raft.Peer.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 raftid = 1;
  if (this->raftid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->raftid(), output);
  }

  // uint64 nodeid = 2;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->nodeid(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.Peer.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.Peer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 raftid = 1;
  if (this->raftid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->raftid(), target);
  }

  // uint64 nodeid = 2;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->nodeid(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "raft.Peer.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.Peer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // uint64 raftid = 1;
  if (this->raftid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->raftid());
  }

  // uint64 nodeid = 2;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.raftid() != 0) {
    set_raftid(from.raftid());
  }
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  swap(raftid_, other->raftid_);
  swap(nodeid_, other->nodeid_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemberChangeRequest::InitAsDefaultInstance() {
  ::raft::_MemberChangeRequest_default_instance_._instance.get_mutable()->peer_ = const_cast< ::raft::Peer*>(
      ::raft::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberChangeRequest::kTypeFieldNumber;
const int MemberChangeRequest::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberChangeRequest::MemberChangeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsMemberChangeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.MemberChangeRequest)
}
MemberChangeRequest::MemberChangeRequest(const MemberChangeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::raft::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:raft.MemberChangeRequest)
}

void MemberChangeRequest::SharedCtor() {
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(type_));
  _cached_size_ = 0;
}

MemberChangeRequest::~MemberChangeRequest() {
  // @@protoc_insertion_point(destructor:raft.MemberChangeRequest)
  SharedDtor();
}

void MemberChangeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void MemberChangeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberChangeRequest::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberChangeRequest& MemberChangeRequest::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsMemberChangeRequest();
  return *internal_default_instance();
}

MemberChangeRequest* MemberChangeRequest::New(::google::protobuf::Arena* arena) const {
  MemberChangeRequest* n = new MemberChangeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MemberChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool MemberChangeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.MemberChangeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft.RaftLogType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raft::RaftLogType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.MemberChangeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.MemberChangeRequest)
  return false;
#undef DO_
}

void MemberChangeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.MemberChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftLogType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .raft.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.MemberChangeRequest)
}

::google::protobuf::uint8* MemberChangeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.MemberChangeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftLogType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .raft.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MemberChangeRequest)
  return target;
}

size_t MemberChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MemberChangeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .raft.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->peer_);
  }

  // .raft.RaftLogType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberChangeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.MemberChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberChangeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberChangeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.MemberChangeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.MemberChangeRequest)
    MergeFrom(*source);
  }
}

void MemberChangeRequest::MergeFrom(const MemberChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.MemberChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::raft::Peer::MergeFrom(from.peer());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MemberChangeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.MemberChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberChangeRequest::CopyFrom(const MemberChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MemberChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberChangeRequest::IsInitialized() const {
  return true;
}

void MemberChangeRequest::Swap(MemberChangeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberChangeRequest::InternalSwap(MemberChangeRequest* other) {
  using std::swap;
  swap(peer_, other->peer_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberChangeRequest::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MemberChangeResponse::InitAsDefaultInstance() {
  ::raft::_MemberChangeResponse_default_instance_._instance.get_mutable()->peer_ = const_cast< ::raft::Peer*>(
      ::raft::Peer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemberChangeResponse::kOkFieldNumber;
const int MemberChangeResponse::kPeerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemberChangeResponse::MemberChangeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsMemberChangeResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.MemberChangeResponse)
}
MemberChangeResponse::MemberChangeResponse(const MemberChangeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_peer()) {
    peer_ = new ::raft::Peer(*from.peer_);
  } else {
    peer_ = NULL;
  }
  ok_ = from.ok_;
  // @@protoc_insertion_point(copy_constructor:raft.MemberChangeResponse)
}

void MemberChangeResponse::SharedCtor() {
  ::memset(&peer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ok_) -
      reinterpret_cast<char*>(&peer_)) + sizeof(ok_));
  _cached_size_ = 0;
}

MemberChangeResponse::~MemberChangeResponse() {
  // @@protoc_insertion_point(destructor:raft.MemberChangeResponse)
  SharedDtor();
}

void MemberChangeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete peer_;
}

void MemberChangeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberChangeResponse::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MemberChangeResponse& MemberChangeResponse::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsMemberChangeResponse();
  return *internal_default_instance();
}

MemberChangeResponse* MemberChangeResponse::New(::google::protobuf::Arena* arena) const {
  MemberChangeResponse* n = new MemberChangeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemberChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MemberChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
  ok_ = false;
  _internal_metadata_.Clear();
}

bool MemberChangeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.MemberChangeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool ok = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.Peer peer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_peer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.MemberChangeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.MemberChangeResponse)
  return false;
#undef DO_
}

void MemberChangeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.MemberChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ok(), output);
  }

  // .raft.Peer peer = 2;
  if (this->has_peer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->peer_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.MemberChangeResponse)
}

::google::protobuf::uint8* MemberChangeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.MemberChangeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ok = 1;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ok(), target);
  }

  // .raft.Peer peer = 2;
  if (this->has_peer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->peer_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MemberChangeResponse)
  return target;
}

size_t MemberChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MemberChangeResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .raft.Peer peer = 2;
  if (this->has_peer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->peer_);
  }

  // bool ok = 1;
  if (this->ok() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberChangeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.MemberChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MemberChangeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MemberChangeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.MemberChangeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.MemberChangeResponse)
    MergeFrom(*source);
  }
}

void MemberChangeResponse::MergeFrom(const MemberChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.MemberChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_peer()) {
    mutable_peer()->::raft::Peer::MergeFrom(from.peer());
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
}

void MemberChangeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.MemberChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberChangeResponse::CopyFrom(const MemberChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MemberChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberChangeResponse::IsInitialized() const {
  return true;
}

void MemberChangeResponse::Swap(MemberChangeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemberChangeResponse::InternalSwap(MemberChangeResponse* other) {
  using std::swap;
  swap(peer_, other->peer_);
  swap(ok_, other->ok_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemberChangeResponse::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VoteRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteRequest::kTermFieldNumber;
const int VoteRequest::kCandidateFieldNumber;
const int VoteRequest::kLastTermFieldNumber;
const int VoteRequest::kLastIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteRequest::VoteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsVoteRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.VoteRequest)
}
VoteRequest::VoteRequest(const VoteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_index_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteRequest)
}

void VoteRequest::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_index_));
  _cached_size_ = 0;
}

VoteRequest::~VoteRequest() {
  // @@protoc_insertion_point(destructor:raft.VoteRequest)
  SharedDtor();
}

void VoteRequest::SharedDtor() {
}

void VoteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteRequest::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoteRequest& VoteRequest::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsVoteRequest();
  return *internal_default_instance();
}

VoteRequest* VoteRequest::New(::google::protobuf::Arena* arena) const {
  VoteRequest* n = new VoteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_index_));
  _internal_metadata_.Clear();
}

bool VoteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.VoteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 candidate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &candidate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 last_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.VoteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.VoteRequest)
  return false;
#undef DO_
}

void VoteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.VoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // uint64 candidate = 2;
  if (this->candidate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->candidate(), output);
  }

  // uint64 last_term = 3;
  if (this->last_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->last_term(), output);
  }

  // uint64 last_index = 4;
  if (this->last_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.VoteRequest)
}

::google::protobuf::uint8* VoteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // uint64 candidate = 2;
  if (this->candidate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->candidate(), target);
  }

  // uint64 last_term = 3;
  if (this->last_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->last_term(), target);
  }

  // uint64 last_index = 4;
  if (this->last_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteRequest)
  return target;
}

size_t VoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 candidate = 2;
  if (this->candidate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->candidate());
  }

  // uint64 last_term = 3;
  if (this->last_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_term());
  }

  // uint64 last_index = 4;
  if (this->last_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.VoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.VoteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.VoteRequest)
    MergeFrom(*source);
  }
}

void VoteRequest::MergeFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.candidate() != 0) {
    set_candidate(from.candidate());
  }
  if (from.last_term() != 0) {
    set_last_term(from.last_term());
  }
  if (from.last_index() != 0) {
    set_last_index(from.last_index());
  }
}

void VoteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteRequest::CopyFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequest::IsInitialized() const {
  return true;
}

void VoteRequest::Swap(VoteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteRequest::InternalSwap(VoteRequest* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(candidate_, other->candidate_);
  swap(last_term_, other->last_term_);
  swap(last_index_, other->last_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteRequest::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VoteResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VoteResponse::kTermFieldNumber;
const int VoteResponse::kAgreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VoteResponse::VoteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsVoteResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.VoteResponse)
}
VoteResponse::VoteResponse(const VoteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&term_)) + sizeof(agree_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteResponse)
}

void VoteResponse::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&term_)) + sizeof(agree_));
  _cached_size_ = 0;
}

VoteResponse::~VoteResponse() {
  // @@protoc_insertion_point(destructor:raft.VoteResponse)
  SharedDtor();
}

void VoteResponse::SharedDtor() {
}

void VoteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VoteResponse::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VoteResponse& VoteResponse::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsVoteResponse();
  return *internal_default_instance();
}

VoteResponse* VoteResponse::New(::google::protobuf::Arena* arena) const {
  VoteResponse* n = new VoteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&term_)) + sizeof(agree_));
  _internal_metadata_.Clear();
}

bool VoteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.VoteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool agree = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.VoteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.VoteResponse)
  return false;
#undef DO_
}

void VoteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.VoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // bool agree = 2;
  if (this->agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.VoteResponse)
}

::google::protobuf::uint8* VoteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // bool agree = 2;
  if (this->agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteResponse)
  return target;
}

size_t VoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // bool agree = 2;
  if (this->agree() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VoteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.VoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VoteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.VoteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.VoteResponse)
    MergeFrom(*source);
  }
}

void VoteResponse::MergeFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.agree() != 0) {
    set_agree(from.agree());
  }
}

void VoteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.VoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteResponse::CopyFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResponse::IsInitialized() const {
  return true;
}

void VoteResponse::Swap(VoteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VoteResponse::InternalSwap(VoteResponse* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(agree_, other->agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VoteResponse::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesRequest::kNodeidFieldNumber;
const int AppendEntriesRequest::kTermFieldNumber;
const int AppendEntriesRequest::kCommitFieldNumber;
const int AppendEntriesRequest::kPrevLogTermFieldNumber;
const int AppendEntriesRequest::kPrevLogIndexFieldNumber;
const int AppendEntriesRequest::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesRequest::AppendEntriesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nodeid_, &from.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&prev_log_index_) -
    reinterpret_cast<char*>(&nodeid_)) + sizeof(prev_log_index_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesRequest)
}

void AppendEntriesRequest::SharedCtor() {
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_log_index_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(prev_log_index_));
  _cached_size_ = 0;
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesRequest)
  SharedDtor();
}

void AppendEntriesRequest::SharedDtor() {
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesRequest::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesRequest& AppendEntriesRequest::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesRequest();
  return *internal_default_instance();
}

AppendEntriesRequest* AppendEntriesRequest::New(::google::protobuf::Arena* arena) const {
  AppendEntriesRequest* n = new AppendEntriesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prev_log_index_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(prev_log_index_));
  _internal_metadata_.Clear();
}

bool AppendEntriesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.AppendEntriesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 nodeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prev_log_term = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prev_log_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prev_log_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .raft.LogEntry entries = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.AppendEntriesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.AppendEntriesRequest)
  return false;
#undef DO_
}

void AppendEntriesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nodeid = 1;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nodeid(), output);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->term(), output);
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->commit(), output);
  }

  // uint64 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prev_log_term(), output);
  }

  // uint64 prev_log_index = 5;
  if (this->prev_log_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->prev_log_index(), output);
  }

  // repeated .raft.LogEntry entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entries(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.AppendEntriesRequest)
}

::google::protobuf::uint8* AppendEntriesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nodeid = 1;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nodeid(), target);
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->term(), target);
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->commit(), target);
  }

  // uint64 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prev_log_term(), target);
  }

  // uint64 prev_log_index = 5;
  if (this->prev_log_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->prev_log_index(), target);
  }

  // repeated .raft.LogEntry entries = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->entries(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .raft.LogEntry entries = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // uint64 nodeid = 1;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint64 term = 2;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 commit = 3;
  if (this->commit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commit());
  }

  // uint64 prev_log_term = 4;
  if (this->prev_log_term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_term());
  }

  // uint64 prev_log_index = 5;
  if (this->prev_log_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prev_log_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.AppendEntriesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.AppendEntriesRequest)
    MergeFrom(*source);
  }
}

void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.commit() != 0) {
    set_commit(from.commit());
  }
  if (from.prev_log_term() != 0) {
    set_prev_log_term(from.prev_log_term());
  }
  if (from.prev_log_index() != 0) {
    set_prev_log_index(from.prev_log_index());
  }
}

void AppendEntriesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  return true;
}

void AppendEntriesRequest::Swap(AppendEntriesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  entries_.InternalSwap(&other->entries_);
  swap(nodeid_, other->nodeid_);
  swap(term_, other->term_);
  swap(commit_, other->commit_);
  swap(prev_log_term_, other->prev_log_term_);
  swap(prev_log_index_, other->prev_log_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesRequest::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesResponse::kNodeidFieldNumber;
const int AppendEntriesResponse::kSuccessFieldNumber;
const int AppendEntriesResponse::kTermFieldNumber;
const int AppendEntriesResponse::kCurrentIndexFieldNumber;
const int AppendEntriesResponse::kFirstIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesResponse::AppendEntriesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nodeid_, &from.nodeid_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&nodeid_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesResponse)
}

void AppendEntriesResponse::SharedCtor() {
  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(success_));
  _cached_size_ = 0;
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesResponse)
  SharedDtor();
}

void AppendEntriesResponse::SharedDtor() {
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppendEntriesResponse::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesResponse& AppendEntriesResponse::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesResponse();
  return *internal_default_instance();
}

AppendEntriesResponse* AppendEntriesResponse::New(::google::protobuf::Arena* arena) const {
  AppendEntriesResponse* n = new AppendEntriesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&nodeid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&nodeid_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool AppendEntriesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.AppendEntriesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 nodeid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nodeid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 current_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 first_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &first_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.AppendEntriesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.AppendEntriesResponse)
  return false;
#undef DO_
}

void AppendEntriesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nodeid = 1;
  if (this->nodeid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->nodeid(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  // uint64 current_index = 4;
  if (this->current_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->current_index(), output);
  }

  // uint64 first_index = 5;
  if (this->first_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->first_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.AppendEntriesResponse)
}

::google::protobuf::uint8* AppendEntriesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 nodeid = 1;
  if (this->nodeid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->nodeid(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  // uint64 current_index = 4;
  if (this->current_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->current_index(), target);
  }

  // uint64 first_index = 5;
  if (this->first_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->first_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesResponse)
  return target;
}

size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 nodeid = 1;
  if (this->nodeid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->nodeid());
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 current_index = 4;
  if (this->current_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->current_index());
  }

  // uint64 first_index = 5;
  if (this->first_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->first_index());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppendEntriesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.AppendEntriesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.AppendEntriesResponse)
    MergeFrom(*source);
  }
}

void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodeid() != 0) {
    set_nodeid(from.nodeid());
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.current_index() != 0) {
    set_current_index(from.current_index());
  }
  if (from.first_index() != 0) {
    set_first_index(from.first_index());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void AppendEntriesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  return true;
}

void AppendEntriesResponse::Swap(AppendEntriesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  swap(nodeid_, other->nodeid_);
  swap(term_, other->term_);
  swap(current_index_, other->current_index_);
  swap(first_index_, other->first_index_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppendEntriesResponse::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RaftMessage::InitAsDefaultInstance() {
  ::raft::_RaftMessage_default_instance_.vt_req_ = const_cast< ::raft::VoteRequest*>(
      ::raft::VoteRequest::internal_default_instance());
  ::raft::_RaftMessage_default_instance_.vt_rsp_ = const_cast< ::raft::VoteResponse*>(
      ::raft::VoteResponse::internal_default_instance());
  ::raft::_RaftMessage_default_instance_.ae_req_ = const_cast< ::raft::AppendEntriesRequest*>(
      ::raft::AppendEntriesRequest::internal_default_instance());
  ::raft::_RaftMessage_default_instance_.ae_rsp_ = const_cast< ::raft::AppendEntriesResponse*>(
      ::raft::AppendEntriesResponse::internal_default_instance());
  ::raft::_RaftMessage_default_instance_.mc_req_ = const_cast< ::raft::MemberChangeRequest*>(
      ::raft::MemberChangeRequest::internal_default_instance());
  ::raft::_RaftMessage_default_instance_.mc_rsp_ = const_cast< ::raft::MemberChangeResponse*>(
      ::raft::MemberChangeResponse::internal_default_instance());
}
void RaftMessage::set_allocated_vt_req(::raft::VoteRequest* vt_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (vt_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vt_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vt_req, submessage_arena);
    }
    set_has_vt_req();
    msg_.vt_req_ = vt_req;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.vt_req)
}
void RaftMessage::set_allocated_vt_rsp(::raft::VoteResponse* vt_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (vt_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vt_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vt_rsp, submessage_arena);
    }
    set_has_vt_rsp();
    msg_.vt_rsp_ = vt_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.vt_rsp)
}
void RaftMessage::set_allocated_ae_req(::raft::AppendEntriesRequest* ae_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (ae_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ae_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ae_req, submessage_arena);
    }
    set_has_ae_req();
    msg_.ae_req_ = ae_req;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.ae_req)
}
void RaftMessage::set_allocated_ae_rsp(::raft::AppendEntriesResponse* ae_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (ae_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ae_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ae_rsp, submessage_arena);
    }
    set_has_ae_rsp();
    msg_.ae_rsp_ = ae_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.ae_rsp)
}
void RaftMessage::set_allocated_mc_req(::raft::MemberChangeRequest* mc_req) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (mc_req) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mc_req = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mc_req, submessage_arena);
    }
    set_has_mc_req();
    msg_.mc_req_ = mc_req;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.mc_req)
}
void RaftMessage::set_allocated_mc_rsp(::raft::MemberChangeResponse* mc_rsp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (mc_rsp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mc_rsp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mc_rsp, submessage_arena);
    }
    set_has_mc_rsp();
    msg_.mc_rsp_ = mc_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.mc_rsp)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaftMessage::kTypeFieldNumber;
const int RaftMessage::kRaftidFieldNumber;
const int RaftMessage::kVtReqFieldNumber;
const int RaftMessage::kVtRspFieldNumber;
const int RaftMessage::kAeReqFieldNumber;
const int RaftMessage::kAeRspFieldNumber;
const int RaftMessage::kMcReqFieldNumber;
const int RaftMessage::kMcRspFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaftMessage::RaftMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_raftmsg_2eproto::InitDefaultsRaftMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:raft.RaftMessage)
}
RaftMessage::RaftMessage(const RaftMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&raftid_) -
    reinterpret_cast<char*>(&type_)) + sizeof(raftid_));
  clear_has_msg();
  switch (from.msg_case()) {
    case kVtReq: {
      mutable_vt_req()->::raft::VoteRequest::MergeFrom(from.vt_req());
      break;
    }
    case kVtRsp: {
      mutable_vt_rsp()->::raft::VoteResponse::MergeFrom(from.vt_rsp());
      break;
    }
    case kAeReq: {
      mutable_ae_req()->::raft::AppendEntriesRequest::MergeFrom(from.ae_req());
      break;
    }
    case kAeRsp: {
      mutable_ae_rsp()->::raft::AppendEntriesResponse::MergeFrom(from.ae_rsp());
      break;
    }
    case kMcReq: {
      mutable_mc_req()->::raft::MemberChangeRequest::MergeFrom(from.mc_req());
      break;
    }
    case kMcRsp: {
      mutable_mc_rsp()->::raft::MemberChangeResponse::MergeFrom(from.mc_rsp());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:raft.RaftMessage)
}

void RaftMessage::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raftid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(raftid_));
  clear_has_msg();
  _cached_size_ = 0;
}

RaftMessage::~RaftMessage() {
  // @@protoc_insertion_point(destructor:raft.RaftMessage)
  SharedDtor();
}

void RaftMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void RaftMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaftMessage::descriptor() {
  ::protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RaftMessage& RaftMessage::default_instance() {
  ::protobuf_raftmsg_2eproto::InitDefaultsRaftMessage();
  return *internal_default_instance();
}

RaftMessage* RaftMessage::New(::google::protobuf::Arena* arena) const {
  RaftMessage* n = new RaftMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RaftMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:raft.RaftMessage)
  switch (msg_case()) {
    case kVtReq: {
      delete msg_.vt_req_;
      break;
    }
    case kVtRsp: {
      delete msg_.vt_rsp_;
      break;
    }
    case kAeReq: {
      delete msg_.ae_req_;
      break;
    }
    case kAeRsp: {
      delete msg_.ae_rsp_;
      break;
    }
    case kMcReq: {
      delete msg_.mc_req_;
      break;
    }
    case kMcRsp: {
      delete msg_.mc_rsp_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RaftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.RaftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&raftid_) -
      reinterpret_cast<char*>(&type_)) + sizeof(raftid_));
  clear_msg();
  _internal_metadata_.Clear();
}

bool RaftMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:raft.RaftMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .raft.RaftMessage.RaftMessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::raft::RaftMessage_RaftMessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 raftid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raftid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.VoteRequest vt_req = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vt_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.VoteResponse vt_rsp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_vt_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.AppendEntriesRequest ae_req = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ae_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.AppendEntriesResponse ae_rsp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ae_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.MemberChangeRequest mc_req = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mc_req()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .raft.MemberChangeResponse mc_rsp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mc_rsp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:raft.RaftMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:raft.RaftMessage)
  return false;
#undef DO_
}

void RaftMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:raft.RaftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftMessage.RaftMessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 raftid = 2;
  if (this->raftid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->raftid(), output);
  }

  // .raft.VoteRequest vt_req = 3;
  if (has_vt_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.vt_req_, output);
  }

  // .raft.VoteResponse vt_rsp = 4;
  if (has_vt_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.vt_rsp_, output);
  }

  // .raft.AppendEntriesRequest ae_req = 5;
  if (has_ae_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_.ae_req_, output);
  }

  // .raft.AppendEntriesResponse ae_rsp = 6;
  if (has_ae_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_.ae_rsp_, output);
  }

  // .raft.MemberChangeRequest mc_req = 7;
  if (has_mc_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *msg_.mc_req_, output);
  }

  // .raft.MemberChangeResponse mc_rsp = 8;
  if (has_mc_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *msg_.mc_rsp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:raft.RaftMessage)
}

::google::protobuf::uint8* RaftMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:raft.RaftMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftMessage.RaftMessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 raftid = 2;
  if (this->raftid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->raftid(), target);
  }

  // .raft.VoteRequest vt_req = 3;
  if (has_vt_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *msg_.vt_req_, deterministic, target);
  }

  // .raft.VoteResponse vt_rsp = 4;
  if (has_vt_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *msg_.vt_rsp_, deterministic, target);
  }

  // .raft.AppendEntriesRequest ae_req = 5;
  if (has_ae_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *msg_.ae_req_, deterministic, target);
  }

  // .raft.AppendEntriesResponse ae_rsp = 6;
  if (has_ae_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *msg_.ae_rsp_, deterministic, target);
  }

  // .raft.MemberChangeRequest mc_req = 7;
  if (has_mc_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *msg_.mc_req_, deterministic, target);
  }

  // .raft.MemberChangeResponse mc_rsp = 8;
  if (has_mc_rsp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *msg_.mc_rsp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.RaftMessage)
  return target;
}

size_t RaftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.RaftMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .raft.RaftMessage.RaftMessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 raftid = 2;
  if (this->raftid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raftid());
  }

  switch (msg_case()) {
    // .raft.VoteRequest vt_req = 3;
    case kVtReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.vt_req_);
      break;
    }
    // .raft.VoteResponse vt_rsp = 4;
    case kVtRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.vt_rsp_);
      break;
    }
    // .raft.AppendEntriesRequest ae_req = 5;
    case kAeReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.ae_req_);
      break;
    }
    // .raft.AppendEntriesResponse ae_rsp = 6;
    case kAeRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.ae_rsp_);
      break;
    }
    // .raft.MemberChangeRequest mc_req = 7;
    case kMcReq: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.mc_req_);
      break;
    }
    // .raft.MemberChangeResponse mc_rsp = 8;
    case kMcRsp: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *msg_.mc_rsp_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaftMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:raft.RaftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RaftMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaftMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:raft.RaftMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:raft.RaftMessage)
    MergeFrom(*source);
  }
}

void RaftMessage::MergeFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.RaftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.raftid() != 0) {
    set_raftid(from.raftid());
  }
  switch (from.msg_case()) {
    case kVtReq: {
      mutable_vt_req()->::raft::VoteRequest::MergeFrom(from.vt_req());
      break;
    }
    case kVtRsp: {
      mutable_vt_rsp()->::raft::VoteResponse::MergeFrom(from.vt_rsp());
      break;
    }
    case kAeReq: {
      mutable_ae_req()->::raft::AppendEntriesRequest::MergeFrom(from.ae_req());
      break;
    }
    case kAeRsp: {
      mutable_ae_rsp()->::raft::AppendEntriesResponse::MergeFrom(from.ae_rsp());
      break;
    }
    case kMcReq: {
      mutable_mc_req()->::raft::MemberChangeRequest::MergeFrom(from.mc_req());
      break;
    }
    case kMcRsp: {
      mutable_mc_rsp()->::raft::MemberChangeResponse::MergeFrom(from.mc_rsp());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void RaftMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:raft.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaftMessage::CopyFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessage::IsInitialized() const {
  return true;
}

void RaftMessage::Swap(RaftMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaftMessage::InternalSwap(RaftMessage* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(raftid_, other->raftid_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RaftMessage::GetMetadata() const {
  protobuf_raftmsg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raftmsg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace raft

// @@protoc_insertion_point(global_scope)
