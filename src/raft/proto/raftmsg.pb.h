// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftmsg.proto

#ifndef PROTOBUF_raftmsg_2eproto__INCLUDED
#define PROTOBUF_raftmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_raftmsg_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLogEntryImpl();
void InitDefaultsLogEntry();
void InitDefaultsLogEntryResponseImpl();
void InitDefaultsLogEntryResponse();
void InitDefaultsPeerImpl();
void InitDefaultsPeer();
void InitDefaultsMemberChangeRequestImpl();
void InitDefaultsMemberChangeRequest();
void InitDefaultsMemberChangeResponseImpl();
void InitDefaultsMemberChangeResponse();
void InitDefaultsVoteRequestImpl();
void InitDefaultsVoteRequest();
void InitDefaultsVoteResponseImpl();
void InitDefaultsVoteResponse();
void InitDefaultsAppendEntriesRequestImpl();
void InitDefaultsAppendEntriesRequest();
void InitDefaultsAppendEntriesResponseImpl();
void InitDefaultsAppendEntriesResponse();
void InitDefaultsRaftMessageImpl();
void InitDefaultsRaftMessage();
inline void InitDefaults() {
  InitDefaultsLogEntry();
  InitDefaultsLogEntryResponse();
  InitDefaultsPeer();
  InitDefaultsMemberChangeRequest();
  InitDefaultsMemberChangeResponse();
  InitDefaultsVoteRequest();
  InitDefaultsVoteResponse();
  InitDefaultsAppendEntriesRequest();
  InitDefaultsAppendEntriesResponse();
  InitDefaultsRaftMessage();
}
}  // namespace protobuf_raftmsg_2eproto
namespace raft {
class AppendEntriesRequest;
class AppendEntriesRequestDefaultTypeInternal;
extern AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
class AppendEntriesResponse;
class AppendEntriesResponseDefaultTypeInternal;
extern AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class LogEntryResponse;
class LogEntryResponseDefaultTypeInternal;
extern LogEntryResponseDefaultTypeInternal _LogEntryResponse_default_instance_;
class MemberChangeRequest;
class MemberChangeRequestDefaultTypeInternal;
extern MemberChangeRequestDefaultTypeInternal _MemberChangeRequest_default_instance_;
class MemberChangeResponse;
class MemberChangeResponseDefaultTypeInternal;
extern MemberChangeResponseDefaultTypeInternal _MemberChangeResponse_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class RaftMessage;
class RaftMessageDefaultTypeInternal;
extern RaftMessageDefaultTypeInternal _RaftMessage_default_instance_;
class VoteRequest;
class VoteRequestDefaultTypeInternal;
extern VoteRequestDefaultTypeInternal _VoteRequest_default_instance_;
class VoteResponse;
class VoteResponseDefaultTypeInternal;
extern VoteResponseDefaultTypeInternal _VoteResponse_default_instance_;
}  // namespace raft
namespace raft {

enum RaftMessage_RaftMessageType {
  RaftMessage_RaftMessageType_MSGTYPE_HANDSHAKE_REQUEST = 0,
  RaftMessage_RaftMessageType_MSGTYPE_HANDSHAKE_RESPONSE = 1,
  RaftMessage_RaftMessageType_MSGTYPE_VOTE_REQUEST = 2,
  RaftMessage_RaftMessageType_MSGTYPE_VOTE_RESPONSE = 3,
  RaftMessage_RaftMessageType_MSGTYPE_APPENDLOG_REQUEST = 4,
  RaftMessage_RaftMessageType_MSGTYPE_APPENDLOG_RESPONSE = 5,
  RaftMessage_RaftMessageType_MSGTYPE_CONFCHANGE_REQUEST = 6,
  RaftMessage_RaftMessageType_MSGTYPE_CONFCHANGE_RESPONSE = 7,
  RaftMessage_RaftMessageType_RaftMessage_RaftMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RaftMessage_RaftMessageType_RaftMessage_RaftMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RaftMessage_RaftMessageType_IsValid(int value);
const RaftMessage_RaftMessageType RaftMessage_RaftMessageType_RaftMessageType_MIN = RaftMessage_RaftMessageType_MSGTYPE_HANDSHAKE_REQUEST;
const RaftMessage_RaftMessageType RaftMessage_RaftMessageType_RaftMessageType_MAX = RaftMessage_RaftMessageType_MSGTYPE_CONFCHANGE_RESPONSE;
const int RaftMessage_RaftMessageType_RaftMessageType_ARRAYSIZE = RaftMessage_RaftMessageType_RaftMessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaftMessage_RaftMessageType_descriptor();
inline const ::std::string& RaftMessage_RaftMessageType_Name(RaftMessage_RaftMessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaftMessage_RaftMessageType_descriptor(), value);
}
inline bool RaftMessage_RaftMessageType_Parse(
    const ::std::string& name, RaftMessage_RaftMessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftMessage_RaftMessageType>(
    RaftMessage_RaftMessageType_descriptor(), name, value);
}
enum RaftLogType {
  LOGTYPE_NORMAL = 0,
  LOGTYPE_ADD_NONVOTING_NODE = 1,
  LOGTYPE_ADD_NODE = 2,
  LOGTYPE_REMOVE_NODE = 3,
  RaftLogType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RaftLogType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RaftLogType_IsValid(int value);
const RaftLogType RaftLogType_MIN = LOGTYPE_NORMAL;
const RaftLogType RaftLogType_MAX = LOGTYPE_REMOVE_NODE;
const int RaftLogType_ARRAYSIZE = RaftLogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RaftLogType_descriptor();
inline const ::std::string& RaftLogType_Name(RaftLogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RaftLogType_descriptor(), value);
}
inline bool RaftLogType_Parse(
    const ::std::string& name, RaftLogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaftLogType>(
    RaftLogType_descriptor(), name, value);
}
// ===================================================================

class LogEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LogEntry* other);
  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  LogEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 index = 3;
  void clear_index();
  static const int kIndexFieldNumber = 3;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // .raft.RaftLogType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raft::RaftLogType type() const;
  void set_type(::raft::RaftLogType value);

  // @@protoc_insertion_point(class_scope:raft.LogEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 index_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsLogEntryImpl();
};
// -------------------------------------------------------------------

class LogEntryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.LogEntryResponse) */ {
 public:
  LogEntryResponse();
  virtual ~LogEntryResponse();

  LogEntryResponse(const LogEntryResponse& from);

  inline LogEntryResponse& operator=(const LogEntryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogEntryResponse(LogEntryResponse&& from) noexcept
    : LogEntryResponse() {
    *this = ::std::move(from);
  }

  inline LogEntryResponse& operator=(LogEntryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntryResponse* internal_default_instance() {
    return reinterpret_cast<const LogEntryResponse*>(
               &_LogEntryResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LogEntryResponse* other);
  friend void swap(LogEntryResponse& a, LogEntryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntryResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogEntryResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogEntryResponse& from);
  void MergeFrom(const LogEntryResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogEntryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 index = 2;
  void clear_index();
  static const int kIndexFieldNumber = 2;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft.LogEntryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 index_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsLogEntryResponseImpl();
};
// -------------------------------------------------------------------

class Peer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Peer* other);
  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const PROTOBUF_FINAL { return New(NULL); }

  Peer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Peer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 3;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // uint64 raftid = 1;
  void clear_raftid();
  static const int kRaftidFieldNumber = 1;
  ::google::protobuf::uint64 raftid() const;
  void set_raftid(::google::protobuf::uint64 value);

  // uint64 nodeid = 2;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:raft.Peer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::uint64 raftid_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsPeerImpl();
};
// -------------------------------------------------------------------

class MemberChangeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.MemberChangeRequest) */ {
 public:
  MemberChangeRequest();
  virtual ~MemberChangeRequest();

  MemberChangeRequest(const MemberChangeRequest& from);

  inline MemberChangeRequest& operator=(const MemberChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemberChangeRequest(MemberChangeRequest&& from) noexcept
    : MemberChangeRequest() {
    *this = ::std::move(from);
  }

  inline MemberChangeRequest& operator=(MemberChangeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberChangeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberChangeRequest* internal_default_instance() {
    return reinterpret_cast<const MemberChangeRequest*>(
               &_MemberChangeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MemberChangeRequest* other);
  friend void swap(MemberChangeRequest& a, MemberChangeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemberChangeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberChangeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberChangeRequest& from);
  void MergeFrom(const MemberChangeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberChangeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft.Peer peer = 2;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 2;
  const ::raft::Peer& peer() const;
  ::raft::Peer* release_peer();
  ::raft::Peer* mutable_peer();
  void set_allocated_peer(::raft::Peer* peer);

  // .raft.RaftLogType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raft::RaftLogType type() const;
  void set_type(::raft::RaftLogType value);

  // @@protoc_insertion_point(class_scope:raft.MemberChangeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft::Peer* peer_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsMemberChangeRequestImpl();
};
// -------------------------------------------------------------------

class MemberChangeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.MemberChangeResponse) */ {
 public:
  MemberChangeResponse();
  virtual ~MemberChangeResponse();

  MemberChangeResponse(const MemberChangeResponse& from);

  inline MemberChangeResponse& operator=(const MemberChangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MemberChangeResponse(MemberChangeResponse&& from) noexcept
    : MemberChangeResponse() {
    *this = ::std::move(from);
  }

  inline MemberChangeResponse& operator=(MemberChangeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberChangeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MemberChangeResponse* internal_default_instance() {
    return reinterpret_cast<const MemberChangeResponse*>(
               &_MemberChangeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(MemberChangeResponse* other);
  friend void swap(MemberChangeResponse& a, MemberChangeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MemberChangeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  MemberChangeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MemberChangeResponse& from);
  void MergeFrom(const MemberChangeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MemberChangeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .raft.Peer peer = 3;
  bool has_peer() const;
  void clear_peer();
  static const int kPeerFieldNumber = 3;
  const ::raft::Peer& peer() const;
  ::raft::Peer* release_peer();
  ::raft::Peer* mutable_peer();
  void set_allocated_peer(::raft::Peer* peer);

  // uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // bool ok = 1;
  void clear_ok();
  static const int kOkFieldNumber = 1;
  bool ok() const;
  void set_ok(bool value);

  // @@protoc_insertion_point(class_scope:raft.MemberChangeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::raft::Peer* peer_;
  ::google::protobuf::uint64 term_;
  bool ok_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsMemberChangeResponseImpl();
};
// -------------------------------------------------------------------

class VoteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.VoteRequest) */ {
 public:
  VoteRequest();
  virtual ~VoteRequest();

  VoteRequest(const VoteRequest& from);

  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteRequest(VoteRequest&& from) noexcept
    : VoteRequest() {
    *this = ::std::move(from);
  }

  inline VoteRequest& operator=(VoteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoteRequest* internal_default_instance() {
    return reinterpret_cast<const VoteRequest*>(
               &_VoteRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(VoteRequest* other);
  friend void swap(VoteRequest& a, VoteRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteRequest& from);
  void MergeFrom(const VoteRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 candidate = 2;
  void clear_candidate();
  static const int kCandidateFieldNumber = 2;
  ::google::protobuf::uint64 candidate() const;
  void set_candidate(::google::protobuf::uint64 value);

  // uint64 last_term = 3;
  void clear_last_term();
  static const int kLastTermFieldNumber = 3;
  ::google::protobuf::uint64 last_term() const;
  void set_last_term(::google::protobuf::uint64 value);

  // uint64 last_index = 4;
  void clear_last_index();
  static const int kLastIndexFieldNumber = 4;
  ::google::protobuf::uint64 last_index() const;
  void set_last_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft.VoteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 candidate_;
  ::google::protobuf::uint64 last_term_;
  ::google::protobuf::uint64 last_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsVoteRequestImpl();
};
// -------------------------------------------------------------------

class VoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.VoteResponse) */ {
 public:
  VoteResponse();
  virtual ~VoteResponse();

  VoteResponse(const VoteResponse& from);

  inline VoteResponse& operator=(const VoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteResponse(VoteResponse&& from) noexcept
    : VoteResponse() {
    *this = ::std::move(from);
  }

  inline VoteResponse& operator=(VoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoteResponse* internal_default_instance() {
    return reinterpret_cast<const VoteResponse*>(
               &_VoteResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VoteResponse* other);
  friend void swap(VoteResponse& a, VoteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  VoteResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VoteResponse& from);
  void MergeFrom(const VoteResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 nodeid = 2;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 2;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // bool agree = 3;
  void clear_agree();
  static const int kAgreeFieldNumber = 3;
  bool agree() const;
  void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:raft.VoteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 nodeid_;
  bool agree_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsVoteResponseImpl();
};
// -------------------------------------------------------------------

class AppendEntriesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.AppendEntriesRequest) */ {
 public:
  AppendEntriesRequest();
  virtual ~AppendEntriesRequest();

  AppendEntriesRequest(const AppendEntriesRequest& from);

  inline AppendEntriesRequest& operator=(const AppendEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesRequest(AppendEntriesRequest&& from) noexcept
    : AppendEntriesRequest() {
    *this = ::std::move(from);
  }

  inline AppendEntriesRequest& operator=(AppendEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesRequest*>(
               &_AppendEntriesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(AppendEntriesRequest* other);
  friend void swap(AppendEntriesRequest& a, AppendEntriesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AppendEntriesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppendEntriesRequest& from);
  void MergeFrom(const AppendEntriesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppendEntriesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .raft.LogEntry entries = 6;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 6;
  const ::raft::LogEntry& entries(int index) const;
  ::raft::LogEntry* mutable_entries(int index);
  ::raft::LogEntry* add_entries();
  ::google::protobuf::RepeatedPtrField< ::raft::LogEntry >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::raft::LogEntry >&
      entries() const;

  // uint64 nodeid = 1;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 1;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint64 term = 2;
  void clear_term();
  static const int kTermFieldNumber = 2;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 commit = 3;
  void clear_commit();
  static const int kCommitFieldNumber = 3;
  ::google::protobuf::uint64 commit() const;
  void set_commit(::google::protobuf::uint64 value);

  // uint64 prev_log_term = 4;
  void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::uint64 prev_log_term() const;
  void set_prev_log_term(::google::protobuf::uint64 value);

  // uint64 prev_log_index = 5;
  void clear_prev_log_index();
  static const int kPrevLogIndexFieldNumber = 5;
  ::google::protobuf::uint64 prev_log_index() const;
  void set_prev_log_index(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:raft.AppendEntriesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::raft::LogEntry > entries_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 commit_;
  ::google::protobuf::uint64 prev_log_term_;
  ::google::protobuf::uint64 prev_log_index_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesRequestImpl();
};
// -------------------------------------------------------------------

class AppendEntriesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.AppendEntriesResponse) */ {
 public:
  AppendEntriesResponse();
  virtual ~AppendEntriesResponse();

  AppendEntriesResponse(const AppendEntriesResponse& from);

  inline AppendEntriesResponse& operator=(const AppendEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesResponse(AppendEntriesResponse&& from) noexcept
    : AppendEntriesResponse() {
    *this = ::std::move(from);
  }

  inline AppendEntriesResponse& operator=(AppendEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesResponse*>(
               &_AppendEntriesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(AppendEntriesResponse* other);
  friend void swap(AppendEntriesResponse& a, AppendEntriesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  AppendEntriesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppendEntriesResponse& from);
  void MergeFrom(const AppendEntriesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppendEntriesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 nodeid = 1;
  void clear_nodeid();
  static const int kNodeidFieldNumber = 1;
  ::google::protobuf::uint64 nodeid() const;
  void set_nodeid(::google::protobuf::uint64 value);

  // uint64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 current_index = 4;
  void clear_current_index();
  static const int kCurrentIndexFieldNumber = 4;
  ::google::protobuf::uint64 current_index() const;
  void set_current_index(::google::protobuf::uint64 value);

  // uint64 first_index = 5;
  void clear_first_index();
  static const int kFirstIndexFieldNumber = 5;
  ::google::protobuf::uint64 first_index() const;
  void set_first_index(::google::protobuf::uint64 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:raft.AppendEntriesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 nodeid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 current_index_;
  ::google::protobuf::uint64 first_index_;
  bool success_;
  mutable int _cached_size_;
  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsAppendEntriesResponseImpl();
};
// -------------------------------------------------------------------

class RaftMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:raft.RaftMessage) */ {
 public:
  RaftMessage();
  virtual ~RaftMessage();

  RaftMessage(const RaftMessage& from);

  inline RaftMessage& operator=(const RaftMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RaftMessage(RaftMessage&& from) noexcept
    : RaftMessage() {
    *this = ::std::move(from);
  }

  inline RaftMessage& operator=(RaftMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RaftMessage& default_instance();

  enum MsgCase {
    kVtReq = 3,
    kVtRsp = 4,
    kAeReq = 5,
    kAeRsp = 6,
    kMcReq = 7,
    kMcRsp = 8,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaftMessage* internal_default_instance() {
    return reinterpret_cast<const RaftMessage*>(
               &_RaftMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RaftMessage* other);
  friend void swap(RaftMessage& a, RaftMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RaftMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RaftMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RaftMessage& from);
  void MergeFrom(const RaftMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RaftMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RaftMessage_RaftMessageType RaftMessageType;
  static const RaftMessageType MSGTYPE_HANDSHAKE_REQUEST =
    RaftMessage_RaftMessageType_MSGTYPE_HANDSHAKE_REQUEST;
  static const RaftMessageType MSGTYPE_HANDSHAKE_RESPONSE =
    RaftMessage_RaftMessageType_MSGTYPE_HANDSHAKE_RESPONSE;
  static const RaftMessageType MSGTYPE_VOTE_REQUEST =
    RaftMessage_RaftMessageType_MSGTYPE_VOTE_REQUEST;
  static const RaftMessageType MSGTYPE_VOTE_RESPONSE =
    RaftMessage_RaftMessageType_MSGTYPE_VOTE_RESPONSE;
  static const RaftMessageType MSGTYPE_APPENDLOG_REQUEST =
    RaftMessage_RaftMessageType_MSGTYPE_APPENDLOG_REQUEST;
  static const RaftMessageType MSGTYPE_APPENDLOG_RESPONSE =
    RaftMessage_RaftMessageType_MSGTYPE_APPENDLOG_RESPONSE;
  static const RaftMessageType MSGTYPE_CONFCHANGE_REQUEST =
    RaftMessage_RaftMessageType_MSGTYPE_CONFCHANGE_REQUEST;
  static const RaftMessageType MSGTYPE_CONFCHANGE_RESPONSE =
    RaftMessage_RaftMessageType_MSGTYPE_CONFCHANGE_RESPONSE;
  static inline bool RaftMessageType_IsValid(int value) {
    return RaftMessage_RaftMessageType_IsValid(value);
  }
  static const RaftMessageType RaftMessageType_MIN =
    RaftMessage_RaftMessageType_RaftMessageType_MIN;
  static const RaftMessageType RaftMessageType_MAX =
    RaftMessage_RaftMessageType_RaftMessageType_MAX;
  static const int RaftMessageType_ARRAYSIZE =
    RaftMessage_RaftMessageType_RaftMessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RaftMessageType_descriptor() {
    return RaftMessage_RaftMessageType_descriptor();
  }
  static inline const ::std::string& RaftMessageType_Name(RaftMessageType value) {
    return RaftMessage_RaftMessageType_Name(value);
  }
  static inline bool RaftMessageType_Parse(const ::std::string& name,
      RaftMessageType* value) {
    return RaftMessage_RaftMessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .raft.RaftMessage.RaftMessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::raft::RaftMessage_RaftMessageType type() const;
  void set_type(::raft::RaftMessage_RaftMessageType value);

  // uint32 raftid = 2;
  void clear_raftid();
  static const int kRaftidFieldNumber = 2;
  ::google::protobuf::uint32 raftid() const;
  void set_raftid(::google::protobuf::uint32 value);

  // .raft.VoteRequest vt_req = 3;
  bool has_vt_req() const;
  void clear_vt_req();
  static const int kVtReqFieldNumber = 3;
  const ::raft::VoteRequest& vt_req() const;
  ::raft::VoteRequest* release_vt_req();
  ::raft::VoteRequest* mutable_vt_req();
  void set_allocated_vt_req(::raft::VoteRequest* vt_req);

  // .raft.VoteResponse vt_rsp = 4;
  bool has_vt_rsp() const;
  void clear_vt_rsp();
  static const int kVtRspFieldNumber = 4;
  const ::raft::VoteResponse& vt_rsp() const;
  ::raft::VoteResponse* release_vt_rsp();
  ::raft::VoteResponse* mutable_vt_rsp();
  void set_allocated_vt_rsp(::raft::VoteResponse* vt_rsp);

  // .raft.AppendEntriesRequest ae_req = 5;
  bool has_ae_req() const;
  void clear_ae_req();
  static const int kAeReqFieldNumber = 5;
  const ::raft::AppendEntriesRequest& ae_req() const;
  ::raft::AppendEntriesRequest* release_ae_req();
  ::raft::AppendEntriesRequest* mutable_ae_req();
  void set_allocated_ae_req(::raft::AppendEntriesRequest* ae_req);

  // .raft.AppendEntriesResponse ae_rsp = 6;
  bool has_ae_rsp() const;
  void clear_ae_rsp();
  static const int kAeRspFieldNumber = 6;
  const ::raft::AppendEntriesResponse& ae_rsp() const;
  ::raft::AppendEntriesResponse* release_ae_rsp();
  ::raft::AppendEntriesResponse* mutable_ae_rsp();
  void set_allocated_ae_rsp(::raft::AppendEntriesResponse* ae_rsp);

  // .raft.MemberChangeRequest mc_req = 7;
  bool has_mc_req() const;
  void clear_mc_req();
  static const int kMcReqFieldNumber = 7;
  const ::raft::MemberChangeRequest& mc_req() const;
  ::raft::MemberChangeRequest* release_mc_req();
  ::raft::MemberChangeRequest* mutable_mc_req();
  void set_allocated_mc_req(::raft::MemberChangeRequest* mc_req);

  // .raft.MemberChangeResponse mc_rsp = 8;
  bool has_mc_rsp() const;
  void clear_mc_rsp();
  static const int kMcRspFieldNumber = 8;
  const ::raft::MemberChangeResponse& mc_rsp() const;
  ::raft::MemberChangeResponse* release_mc_rsp();
  ::raft::MemberChangeResponse* mutable_mc_rsp();
  void set_allocated_mc_rsp(::raft::MemberChangeResponse* mc_rsp);

  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:raft.RaftMessage)
 private:
  void set_has_vt_req();
  void set_has_vt_rsp();
  void set_has_ae_req();
  void set_has_ae_rsp();
  void set_has_mc_req();
  void set_has_mc_rsp();

  inline bool has_msg() const;
  void clear_msg();
  inline void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::uint32 raftid_;
  union MsgUnion {
    MsgUnion() {}
    ::raft::VoteRequest* vt_req_;
    ::raft::VoteResponse* vt_rsp_;
    ::raft::AppendEntriesRequest* ae_req_;
    ::raft::AppendEntriesResponse* ae_rsp_;
    ::raft::MemberChangeRequest* mc_req_;
    ::raft::MemberChangeResponse* mc_rsp_;
  } msg_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_raftmsg_2eproto::TableStruct;
  friend void ::protobuf_raftmsg_2eproto::InitDefaultsRaftMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// .raft.RaftLogType type = 1;
inline void LogEntry::clear_type() {
  type_ = 0;
}
inline ::raft::RaftLogType LogEntry::type() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.type)
  return static_cast< ::raft::RaftLogType >(type_);
}
inline void LogEntry::set_type(::raft::RaftLogType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raft.LogEntry.type)
}

// uint64 term = 2;
inline void LogEntry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.term)
  return term_;
}
inline void LogEntry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.LogEntry.term)
}

// uint64 index = 3;
inline void LogEntry::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogEntry::index() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.index)
  return index_;
}
inline void LogEntry::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft.LogEntry.index)
}

// bytes data = 4;
inline void LogEntry::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry::data() const {
  // @@protoc_insertion_point(field_get:raft.LogEntry.data)
  return data_.GetNoArena();
}
inline void LogEntry::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.LogEntry.data)
}
#if LANG_CXX11
inline void LogEntry::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.LogEntry.data)
}
#endif
inline void LogEntry::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.LogEntry.data)
}
inline void LogEntry::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.LogEntry.data)
}
inline ::std::string* LogEntry::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:raft.LogEntry.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry::release_data() {
  // @@protoc_insertion_point(field_release:raft.LogEntry.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:raft.LogEntry.data)
}

// -------------------------------------------------------------------

// LogEntryResponse

// uint64 term = 1;
inline void LogEntryResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogEntryResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.LogEntryResponse.term)
  return term_;
}
inline void LogEntryResponse::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.LogEntryResponse.term)
}

// uint64 index = 2;
inline void LogEntryResponse::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogEntryResponse::index() const {
  // @@protoc_insertion_point(field_get:raft.LogEntryResponse.index)
  return index_;
}
inline void LogEntryResponse::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:raft.LogEntryResponse.index)
}

// -------------------------------------------------------------------

// Peer

// uint64 raftid = 1;
inline void Peer::clear_raftid() {
  raftid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::raftid() const {
  // @@protoc_insertion_point(field_get:raft.Peer.raftid)
  return raftid_;
}
inline void Peer::set_raftid(::google::protobuf::uint64 value) {
  
  raftid_ = value;
  // @@protoc_insertion_point(field_set:raft.Peer.raftid)
}

// uint64 nodeid = 2;
inline void Peer::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Peer::nodeid() const {
  // @@protoc_insertion_point(field_get:raft.Peer.nodeid)
  return nodeid_;
}
inline void Peer::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:raft.Peer.nodeid)
}

// string ip = 3;
inline void Peer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Peer::ip() const {
  // @@protoc_insertion_point(field_get:raft.Peer.ip)
  return ip_.GetNoArena();
}
inline void Peer::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:raft.Peer.ip)
}
#if LANG_CXX11
inline void Peer::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:raft.Peer.ip)
}
#endif
inline void Peer::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:raft.Peer.ip)
}
inline void Peer::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:raft.Peer.ip)
}
inline ::std::string* Peer::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:raft.Peer.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Peer::release_ip() {
  // @@protoc_insertion_point(field_release:raft.Peer.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:raft.Peer.ip)
}

// uint32 port = 4;
inline void Peer::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 Peer::port() const {
  // @@protoc_insertion_point(field_get:raft.Peer.port)
  return port_;
}
inline void Peer::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:raft.Peer.port)
}

// -------------------------------------------------------------------

// MemberChangeRequest

// .raft.RaftLogType type = 1;
inline void MemberChangeRequest::clear_type() {
  type_ = 0;
}
inline ::raft::RaftLogType MemberChangeRequest::type() const {
  // @@protoc_insertion_point(field_get:raft.MemberChangeRequest.type)
  return static_cast< ::raft::RaftLogType >(type_);
}
inline void MemberChangeRequest::set_type(::raft::RaftLogType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raft.MemberChangeRequest.type)
}

// .raft.Peer peer = 2;
inline bool MemberChangeRequest::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MemberChangeRequest::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::raft::Peer& MemberChangeRequest::peer() const {
  const ::raft::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft.MemberChangeRequest.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::raft::Peer*>(
      &::raft::_Peer_default_instance_);
}
inline ::raft::Peer* MemberChangeRequest::release_peer() {
  // @@protoc_insertion_point(field_release:raft.MemberChangeRequest.peer)
  
  ::raft::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::raft::Peer* MemberChangeRequest::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::raft::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft.MemberChangeRequest.peer)
  return peer_;
}
inline void MemberChangeRequest::set_allocated_peer(::raft::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft.MemberChangeRequest.peer)
}

// -------------------------------------------------------------------

// MemberChangeResponse

// bool ok = 1;
inline void MemberChangeResponse::clear_ok() {
  ok_ = false;
}
inline bool MemberChangeResponse::ok() const {
  // @@protoc_insertion_point(field_get:raft.MemberChangeResponse.ok)
  return ok_;
}
inline void MemberChangeResponse::set_ok(bool value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:raft.MemberChangeResponse.ok)
}

// uint64 term = 2;
inline void MemberChangeResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 MemberChangeResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.MemberChangeResponse.term)
  return term_;
}
inline void MemberChangeResponse::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.MemberChangeResponse.term)
}

// .raft.Peer peer = 3;
inline bool MemberChangeResponse::has_peer() const {
  return this != internal_default_instance() && peer_ != NULL;
}
inline void MemberChangeResponse::clear_peer() {
  if (GetArenaNoVirtual() == NULL && peer_ != NULL) {
    delete peer_;
  }
  peer_ = NULL;
}
inline const ::raft::Peer& MemberChangeResponse::peer() const {
  const ::raft::Peer* p = peer_;
  // @@protoc_insertion_point(field_get:raft.MemberChangeResponse.peer)
  return p != NULL ? *p : *reinterpret_cast<const ::raft::Peer*>(
      &::raft::_Peer_default_instance_);
}
inline ::raft::Peer* MemberChangeResponse::release_peer() {
  // @@protoc_insertion_point(field_release:raft.MemberChangeResponse.peer)
  
  ::raft::Peer* temp = peer_;
  peer_ = NULL;
  return temp;
}
inline ::raft::Peer* MemberChangeResponse::mutable_peer() {
  
  if (peer_ == NULL) {
    peer_ = new ::raft::Peer;
  }
  // @@protoc_insertion_point(field_mutable:raft.MemberChangeResponse.peer)
  return peer_;
}
inline void MemberChangeResponse::set_allocated_peer(::raft::Peer* peer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete peer_;
  }
  if (peer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      peer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, peer, submessage_arena);
    }
    
  } else {
    
  }
  peer_ = peer;
  // @@protoc_insertion_point(field_set_allocated:raft.MemberChangeResponse.peer)
}

// -------------------------------------------------------------------

// VoteRequest

// uint64 term = 1;
inline void VoteRequest::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoteRequest::term() const {
  // @@protoc_insertion_point(field_get:raft.VoteRequest.term)
  return term_;
}
inline void VoteRequest::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteRequest.term)
}

// uint64 candidate = 2;
inline void VoteRequest::clear_candidate() {
  candidate_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoteRequest::candidate() const {
  // @@protoc_insertion_point(field_get:raft.VoteRequest.candidate)
  return candidate_;
}
inline void VoteRequest::set_candidate(::google::protobuf::uint64 value) {
  
  candidate_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteRequest.candidate)
}

// uint64 last_term = 3;
inline void VoteRequest::clear_last_term() {
  last_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoteRequest::last_term() const {
  // @@protoc_insertion_point(field_get:raft.VoteRequest.last_term)
  return last_term_;
}
inline void VoteRequest::set_last_term(::google::protobuf::uint64 value) {
  
  last_term_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteRequest.last_term)
}

// uint64 last_index = 4;
inline void VoteRequest::clear_last_index() {
  last_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoteRequest::last_index() const {
  // @@protoc_insertion_point(field_get:raft.VoteRequest.last_index)
  return last_index_;
}
inline void VoteRequest::set_last_index(::google::protobuf::uint64 value) {
  
  last_index_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteRequest.last_index)
}

// -------------------------------------------------------------------

// VoteResponse

// uint64 term = 1;
inline void VoteResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoteResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.VoteResponse.term)
  return term_;
}
inline void VoteResponse::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteResponse.term)
}

// uint64 nodeid = 2;
inline void VoteResponse::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 VoteResponse::nodeid() const {
  // @@protoc_insertion_point(field_get:raft.VoteResponse.nodeid)
  return nodeid_;
}
inline void VoteResponse::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteResponse.nodeid)
}

// bool agree = 3;
inline void VoteResponse::clear_agree() {
  agree_ = false;
}
inline bool VoteResponse::agree() const {
  // @@protoc_insertion_point(field_get:raft.VoteResponse.agree)
  return agree_;
}
inline void VoteResponse::set_agree(bool value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:raft.VoteResponse.agree)
}

// -------------------------------------------------------------------

// AppendEntriesRequest

// uint64 nodeid = 1;
inline void AppendEntriesRequest::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesRequest::nodeid() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesRequest.nodeid)
  return nodeid_;
}
inline void AppendEntriesRequest::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesRequest.nodeid)
}

// uint64 term = 2;
inline void AppendEntriesRequest::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesRequest::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesRequest.term)
  return term_;
}
inline void AppendEntriesRequest::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesRequest.term)
}

// uint64 commit = 3;
inline void AppendEntriesRequest::clear_commit() {
  commit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesRequest::commit() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesRequest.commit)
  return commit_;
}
inline void AppendEntriesRequest::set_commit(::google::protobuf::uint64 value) {
  
  commit_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesRequest.commit)
}

// uint64 prev_log_term = 4;
inline void AppendEntriesRequest::clear_prev_log_term() {
  prev_log_term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesRequest::prev_log_term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesRequest.prev_log_term)
  return prev_log_term_;
}
inline void AppendEntriesRequest::set_prev_log_term(::google::protobuf::uint64 value) {
  
  prev_log_term_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesRequest.prev_log_term)
}

// uint64 prev_log_index = 5;
inline void AppendEntriesRequest::clear_prev_log_index() {
  prev_log_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesRequest::prev_log_index() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesRequest.prev_log_index)
  return prev_log_index_;
}
inline void AppendEntriesRequest::set_prev_log_index(::google::protobuf::uint64 value) {
  
  prev_log_index_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesRequest.prev_log_index)
}

// repeated .raft.LogEntry entries = 6;
inline int AppendEntriesRequest::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesRequest::clear_entries() {
  entries_.Clear();
}
inline const ::raft::LogEntry& AppendEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesRequest.entries)
  return entries_.Get(index);
}
inline ::raft::LogEntry* AppendEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:raft.AppendEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline ::raft::LogEntry* AppendEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:raft.AppendEntriesRequest.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::raft::LogEntry >*
AppendEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:raft.AppendEntriesRequest.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::raft::LogEntry >&
AppendEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:raft.AppendEntriesRequest.entries)
  return entries_;
}

// -------------------------------------------------------------------

// AppendEntriesResponse

// uint64 nodeid = 1;
inline void AppendEntriesResponse::clear_nodeid() {
  nodeid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesResponse::nodeid() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.nodeid)
  return nodeid_;
}
inline void AppendEntriesResponse::set_nodeid(::google::protobuf::uint64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.nodeid)
}

// bool success = 2;
inline void AppendEntriesResponse::clear_success() {
  success_ = false;
}
inline bool AppendEntriesResponse::success() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.success)
  return success_;
}
inline void AppendEntriesResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.success)
}

// uint64 term = 3;
inline void AppendEntriesResponse::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesResponse::term() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.term)
  return term_;
}
inline void AppendEntriesResponse::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.term)
}

// uint64 current_index = 4;
inline void AppendEntriesResponse::clear_current_index() {
  current_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesResponse::current_index() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.current_index)
  return current_index_;
}
inline void AppendEntriesResponse::set_current_index(::google::protobuf::uint64 value) {
  
  current_index_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.current_index)
}

// uint64 first_index = 5;
inline void AppendEntriesResponse::clear_first_index() {
  first_index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesResponse::first_index() const {
  // @@protoc_insertion_point(field_get:raft.AppendEntriesResponse.first_index)
  return first_index_;
}
inline void AppendEntriesResponse::set_first_index(::google::protobuf::uint64 value) {
  
  first_index_ = value;
  // @@protoc_insertion_point(field_set:raft.AppendEntriesResponse.first_index)
}

// -------------------------------------------------------------------

// RaftMessage

// .raft.RaftMessage.RaftMessageType type = 1;
inline void RaftMessage::clear_type() {
  type_ = 0;
}
inline ::raft::RaftMessage_RaftMessageType RaftMessage::type() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.type)
  return static_cast< ::raft::RaftMessage_RaftMessageType >(type_);
}
inline void RaftMessage::set_type(::raft::RaftMessage_RaftMessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:raft.RaftMessage.type)
}

// uint32 raftid = 2;
inline void RaftMessage::clear_raftid() {
  raftid_ = 0u;
}
inline ::google::protobuf::uint32 RaftMessage::raftid() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.raftid)
  return raftid_;
}
inline void RaftMessage::set_raftid(::google::protobuf::uint32 value) {
  
  raftid_ = value;
  // @@protoc_insertion_point(field_set:raft.RaftMessage.raftid)
}

// .raft.VoteRequest vt_req = 3;
inline bool RaftMessage::has_vt_req() const {
  return msg_case() == kVtReq;
}
inline void RaftMessage::set_has_vt_req() {
  _oneof_case_[0] = kVtReq;
}
inline void RaftMessage::clear_vt_req() {
  if (has_vt_req()) {
    delete msg_.vt_req_;
    clear_has_msg();
  }
}
inline ::raft::VoteRequest* RaftMessage::release_vt_req() {
  // @@protoc_insertion_point(field_release:raft.RaftMessage.vt_req)
  if (has_vt_req()) {
    clear_has_msg();
      ::raft::VoteRequest* temp = msg_.vt_req_;
    msg_.vt_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::raft::VoteRequest& RaftMessage::vt_req() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.vt_req)
  return has_vt_req()
      ? *msg_.vt_req_
      : *reinterpret_cast< ::raft::VoteRequest*>(&::raft::_VoteRequest_default_instance_);
}
inline ::raft::VoteRequest* RaftMessage::mutable_vt_req() {
  if (!has_vt_req()) {
    clear_msg();
    set_has_vt_req();
    msg_.vt_req_ = new ::raft::VoteRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft.RaftMessage.vt_req)
  return msg_.vt_req_;
}

// .raft.VoteResponse vt_rsp = 4;
inline bool RaftMessage::has_vt_rsp() const {
  return msg_case() == kVtRsp;
}
inline void RaftMessage::set_has_vt_rsp() {
  _oneof_case_[0] = kVtRsp;
}
inline void RaftMessage::clear_vt_rsp() {
  if (has_vt_rsp()) {
    delete msg_.vt_rsp_;
    clear_has_msg();
  }
}
inline ::raft::VoteResponse* RaftMessage::release_vt_rsp() {
  // @@protoc_insertion_point(field_release:raft.RaftMessage.vt_rsp)
  if (has_vt_rsp()) {
    clear_has_msg();
      ::raft::VoteResponse* temp = msg_.vt_rsp_;
    msg_.vt_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::raft::VoteResponse& RaftMessage::vt_rsp() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.vt_rsp)
  return has_vt_rsp()
      ? *msg_.vt_rsp_
      : *reinterpret_cast< ::raft::VoteResponse*>(&::raft::_VoteResponse_default_instance_);
}
inline ::raft::VoteResponse* RaftMessage::mutable_vt_rsp() {
  if (!has_vt_rsp()) {
    clear_msg();
    set_has_vt_rsp();
    msg_.vt_rsp_ = new ::raft::VoteResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft.RaftMessage.vt_rsp)
  return msg_.vt_rsp_;
}

// .raft.AppendEntriesRequest ae_req = 5;
inline bool RaftMessage::has_ae_req() const {
  return msg_case() == kAeReq;
}
inline void RaftMessage::set_has_ae_req() {
  _oneof_case_[0] = kAeReq;
}
inline void RaftMessage::clear_ae_req() {
  if (has_ae_req()) {
    delete msg_.ae_req_;
    clear_has_msg();
  }
}
inline ::raft::AppendEntriesRequest* RaftMessage::release_ae_req() {
  // @@protoc_insertion_point(field_release:raft.RaftMessage.ae_req)
  if (has_ae_req()) {
    clear_has_msg();
      ::raft::AppendEntriesRequest* temp = msg_.ae_req_;
    msg_.ae_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::raft::AppendEntriesRequest& RaftMessage::ae_req() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.ae_req)
  return has_ae_req()
      ? *msg_.ae_req_
      : *reinterpret_cast< ::raft::AppendEntriesRequest*>(&::raft::_AppendEntriesRequest_default_instance_);
}
inline ::raft::AppendEntriesRequest* RaftMessage::mutable_ae_req() {
  if (!has_ae_req()) {
    clear_msg();
    set_has_ae_req();
    msg_.ae_req_ = new ::raft::AppendEntriesRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft.RaftMessage.ae_req)
  return msg_.ae_req_;
}

// .raft.AppendEntriesResponse ae_rsp = 6;
inline bool RaftMessage::has_ae_rsp() const {
  return msg_case() == kAeRsp;
}
inline void RaftMessage::set_has_ae_rsp() {
  _oneof_case_[0] = kAeRsp;
}
inline void RaftMessage::clear_ae_rsp() {
  if (has_ae_rsp()) {
    delete msg_.ae_rsp_;
    clear_has_msg();
  }
}
inline ::raft::AppendEntriesResponse* RaftMessage::release_ae_rsp() {
  // @@protoc_insertion_point(field_release:raft.RaftMessage.ae_rsp)
  if (has_ae_rsp()) {
    clear_has_msg();
      ::raft::AppendEntriesResponse* temp = msg_.ae_rsp_;
    msg_.ae_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::raft::AppendEntriesResponse& RaftMessage::ae_rsp() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.ae_rsp)
  return has_ae_rsp()
      ? *msg_.ae_rsp_
      : *reinterpret_cast< ::raft::AppendEntriesResponse*>(&::raft::_AppendEntriesResponse_default_instance_);
}
inline ::raft::AppendEntriesResponse* RaftMessage::mutable_ae_rsp() {
  if (!has_ae_rsp()) {
    clear_msg();
    set_has_ae_rsp();
    msg_.ae_rsp_ = new ::raft::AppendEntriesResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft.RaftMessage.ae_rsp)
  return msg_.ae_rsp_;
}

// .raft.MemberChangeRequest mc_req = 7;
inline bool RaftMessage::has_mc_req() const {
  return msg_case() == kMcReq;
}
inline void RaftMessage::set_has_mc_req() {
  _oneof_case_[0] = kMcReq;
}
inline void RaftMessage::clear_mc_req() {
  if (has_mc_req()) {
    delete msg_.mc_req_;
    clear_has_msg();
  }
}
inline ::raft::MemberChangeRequest* RaftMessage::release_mc_req() {
  // @@protoc_insertion_point(field_release:raft.RaftMessage.mc_req)
  if (has_mc_req()) {
    clear_has_msg();
      ::raft::MemberChangeRequest* temp = msg_.mc_req_;
    msg_.mc_req_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::raft::MemberChangeRequest& RaftMessage::mc_req() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.mc_req)
  return has_mc_req()
      ? *msg_.mc_req_
      : *reinterpret_cast< ::raft::MemberChangeRequest*>(&::raft::_MemberChangeRequest_default_instance_);
}
inline ::raft::MemberChangeRequest* RaftMessage::mutable_mc_req() {
  if (!has_mc_req()) {
    clear_msg();
    set_has_mc_req();
    msg_.mc_req_ = new ::raft::MemberChangeRequest;
  }
  // @@protoc_insertion_point(field_mutable:raft.RaftMessage.mc_req)
  return msg_.mc_req_;
}

// .raft.MemberChangeResponse mc_rsp = 8;
inline bool RaftMessage::has_mc_rsp() const {
  return msg_case() == kMcRsp;
}
inline void RaftMessage::set_has_mc_rsp() {
  _oneof_case_[0] = kMcRsp;
}
inline void RaftMessage::clear_mc_rsp() {
  if (has_mc_rsp()) {
    delete msg_.mc_rsp_;
    clear_has_msg();
  }
}
inline ::raft::MemberChangeResponse* RaftMessage::release_mc_rsp() {
  // @@protoc_insertion_point(field_release:raft.RaftMessage.mc_rsp)
  if (has_mc_rsp()) {
    clear_has_msg();
      ::raft::MemberChangeResponse* temp = msg_.mc_rsp_;
    msg_.mc_rsp_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::raft::MemberChangeResponse& RaftMessage::mc_rsp() const {
  // @@protoc_insertion_point(field_get:raft.RaftMessage.mc_rsp)
  return has_mc_rsp()
      ? *msg_.mc_rsp_
      : *reinterpret_cast< ::raft::MemberChangeResponse*>(&::raft::_MemberChangeResponse_default_instance_);
}
inline ::raft::MemberChangeResponse* RaftMessage::mutable_mc_rsp() {
  if (!has_mc_rsp()) {
    clear_msg();
    set_has_mc_rsp();
    msg_.mc_rsp_ = new ::raft::MemberChangeResponse;
  }
  // @@protoc_insertion_point(field_mutable:raft.RaftMessage.mc_rsp)
  return msg_.mc_rsp_;
}

inline bool RaftMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void RaftMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline RaftMessage::MsgCase RaftMessage::msg_case() const {
  return RaftMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::raft::RaftMessage_RaftMessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::RaftMessage_RaftMessageType>() {
  return ::raft::RaftMessage_RaftMessageType_descriptor();
}
template <> struct is_proto_enum< ::raft::RaftLogType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft::RaftLogType>() {
  return ::raft::RaftLogType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raftmsg_2eproto__INCLUDED
