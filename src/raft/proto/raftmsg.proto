syntax = "proto3";

package raft;

enum RaftLogType {
    LOGTYPE_NORMAL = 0;
    LOGTYPE_ADD_NONVOTING_NODE = 1;
    LOGTYPE_ADD_NODE = 2;
    LOGTYPE_REMOVE_NODE = 3;
    LOGTYPE_NUM = 4;
}

message LogEntry {
    RaftLogType type = 1;

    uint64 term = 2;
    uint64 index = 3;
    bytes data = 4;
};

message LogEntryResponse {
    uint64 term = 1;
    uint64 index = 2;
};

message HandshakeRequest {
    int32 raft_port = 1;
    int32 http_port = 2;
    uint64 node_id = 3;
    uint64 term = 4;
}

message HandshakeResponse {
    bool success = 1;
    uint64 node_id = 2;
}

message VoteRequest {
    uint64 term = 1;
    uint64 candidate = 2; //node id
    uint64 log_index = 3; //last log index
    uint64 log_term = 4;  //last log term
}

message VoteResponse {
    uint64 term = 1;
    bool grant_for = 2; // true or false
}

message AppendEntriesRequest {
    uint64 term = 1;
    uint64 commit = 2; // leader commited log index

    uint64 last_term = 3; // last log term
    uint64 last_index = 4; //last log index

    repeated LogEntry entries = 5;
}

message AppendEntriesResponse {
    bool success = 1; //true if match prev_log
    uint64 term = 2;
    uint64 current_index = 3;
    uint64 first_index = 4;
}

message HeartbeatRequest {
    bool success = 1;
    //TODO
}

message HeartbeatResponse {
    bool success = 1; 
    //TODO
}


message RaftMessage {
    enum RaftMessageType {
        MSGTYPE_HANDSHAKE_REQUEST = 0;
        MSGTYPE_HANDSHAKE_RESPONSE = 1;
        MSGTYPE_VOTE_REQUEST = 2;
        MSGTYPE_VOTE_RESPONSE = 3;
        MSGTYPE_APPENDLOG_REQUEST = 4;
        MSGTYPE_APPENDLOG_RESPONSE = 5;
    }
    RaftMessageType type = 1;

    oneof msg {
        HandshakeRequest hs_req = 2;
        HandshakeResponse hs_rsp = 3;

        VoteRequest vt_req = 4;
        VoteResponse vt_rsp = 5;

        AppendEntriesRequest ae_req = 6;
        AppendEntriesResponse ae_rsp = 7;

        HeartbeatRequest hb_req = 8;
        HeartbeatResponse hb_rsp = 9;
    }
    uint32 raftid = 10;
}
