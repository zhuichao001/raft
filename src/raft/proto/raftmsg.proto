syntax = "proto3";

package raft;

enum RaftLogType {
    LOGTYPE_NORMAL = 0;
    LOGTYPE_ADD_NONVOTING_NODE = 1;
    LOGTYPE_ADD_NODE = 2;
    LOGTYPE_REMOVE_NODE = 3;
};

message LogEntry {
    RaftLogType type = 1;
    uint64 term = 2;
    uint64 index = 3;
    bytes data = 4;
};

message LogEntryResponse {
    uint64 term = 1;
    uint64 index = 2;
};

message Peer {
    uint64 raftid =1;
    uint64 nodeid =2;
    string ip =3;
    uint32 port =4;
};

message MemberChangeRequest {
    RaftLogType type = 1;
    Peer peer = 2;
};

message MemberChangeResponse {
    bool ok = 1;
    uint64 term = 2;
    Peer peer = 3;
};

message VoteRequest {
    uint64 term = 1;
    uint64 candidate = 2; //node id
    uint64 last_term = 3;  //last log term
    uint64 last_index = 4; //last log index
};

message VoteResponse {
    uint64 term = 1;
    bool agree = 2; // grant for true or false
};

message AppendEntriesRequest {
    uint64 nodeid = 1;
    uint64 term = 2;
    uint64 commit = 3; // leader commited log index

    uint64 prev_log_term = 4; // last log term
    uint64 prev_log_index = 5; //last log index

    repeated LogEntry entries = 6;
};

message AppendEntriesResponse {
    uint64 nodeid = 1;
    bool success = 2; //true if match prev_log
    uint64 term = 3;
    uint64 current_index = 4;
    uint64 first_index = 5;
};

message RaftMessage {
    enum RaftMessageType {
        MSGTYPE_HANDSHAKE_REQUEST  = 0;
        MSGTYPE_HANDSHAKE_RESPONSE = 1;
        MSGTYPE_VOTE_REQUEST  = 2;
        MSGTYPE_VOTE_RESPONSE = 3;
        MSGTYPE_APPENDLOG_REQUEST  = 4;
        MSGTYPE_APPENDLOG_RESPONSE = 5;

        MSGTYPE_CONFCHANGE_REQUEST  = 6;
        MSGTYPE_CONFCHANGE_RESPONSE = 7;
    }
    RaftMessageType type = 1;

    uint32 raftid = 2;

    oneof msg {
        VoteRequest vt_req  = 3;
        VoteResponse vt_rsp = 4;

        AppendEntriesRequest ae_req  = 5;
        AppendEntriesResponse ae_rsp = 6;

        MemberChangeRequest mc_req  = 7;
        MemberChangeResponse mc_rsp = 8;
    }
};
