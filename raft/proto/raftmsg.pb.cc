// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftmsg.proto

#include "raftmsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace raft {
PROTOBUF_CONSTEXPR LogEntry::LogEntry(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , term_(uint64_t{0u})
  , index_(uint64_t{0u})
  , type_(0)
{}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
PROTOBUF_CONSTEXPR Peer::Peer(
    ::_pbi::ConstantInitialized)
  : ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , raftid_(0)
  , nodeid_(0)
  , port_(0u)
  , state_(0)
{}
struct PeerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeerDefaultTypeInternal() {}
  union {
    Peer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeerDefaultTypeInternal _Peer_default_instance_;
PROTOBUF_CONSTEXPR VoteRequest::VoteRequest(
    ::_pbi::ConstantInitialized)
  : term_(uint64_t{0u})
  , candidate_(uint64_t{0u})
  , last_term_(uint64_t{0u})
  , last_index_(uint64_t{0u}){}
struct VoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteRequestDefaultTypeInternal() {}
  union {
    VoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteRequestDefaultTypeInternal _VoteRequest_default_instance_;
PROTOBUF_CONSTEXPR VoteResponse::VoteResponse(
    ::_pbi::ConstantInitialized)
  : term_(uint64_t{0u})
  , nodeid_(0)
  , agree_(false){}
struct VoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteResponseDefaultTypeInternal() {}
  union {
    VoteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteResponseDefaultTypeInternal _VoteResponse_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesRequest::AppendEntriesRequest(
    ::_pbi::ConstantInitialized)
  : entries_()
  , term_(uint64_t{0u})
  , commit_(uint64_t{0u})
  , prev_log_term_(uint64_t{0u})
  , prev_log_index_(uint64_t{0u})
  , nodeid_(0){}
struct AppendEntriesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesRequestDefaultTypeInternal() {}
  union {
    AppendEntriesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesRequestDefaultTypeInternal _AppendEntriesRequest_default_instance_;
PROTOBUF_CONSTEXPR AppendEntriesResponse::AppendEntriesResponse(
    ::_pbi::ConstantInitialized)
  : success_(false)
  , nodeid_(0)
  , term_(uint64_t{0u})
  , current_index_(uint64_t{0u})
  , first_index_(uint64_t{0u}){}
struct AppendEntriesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AppendEntriesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AppendEntriesResponseDefaultTypeInternal() {}
  union {
    AppendEntriesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AppendEntriesResponseDefaultTypeInternal _AppendEntriesResponse_default_instance_;
PROTOBUF_CONSTEXPR MemberChangeRequest::MemberChangeRequest(
    ::_pbi::ConstantInitialized)
  : peer_(nullptr)
  , type_(0)
{}
struct MemberChangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemberChangeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemberChangeRequestDefaultTypeInternal() {}
  union {
    MemberChangeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemberChangeRequestDefaultTypeInternal _MemberChangeRequest_default_instance_;
PROTOBUF_CONSTEXPR MemberChangeResponse::MemberChangeResponse(
    ::_pbi::ConstantInitialized)
  : peer_(nullptr)
  , term_(uint64_t{0u})
  , success_(false){}
struct MemberChangeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemberChangeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemberChangeResponseDefaultTypeInternal() {}
  union {
    MemberChangeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemberChangeResponseDefaultTypeInternal _MemberChangeResponse_default_instance_;
PROTOBUF_CONSTEXPR MembersListRequest::MembersListRequest(
    ::_pbi::ConstantInitialized)
  : raftid_(uint64_t{0u}){}
struct MembersListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MembersListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MembersListRequestDefaultTypeInternal() {}
  union {
    MembersListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MembersListRequestDefaultTypeInternal _MembersListRequest_default_instance_;
PROTOBUF_CONSTEXPR MembersListResponse::MembersListResponse(
    ::_pbi::ConstantInitialized)
  : peers_()
  , term_(uint64_t{0u})
  , raftid_(uint64_t{0u})
  , success_(false){}
struct MembersListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MembersListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MembersListResponseDefaultTypeInternal() {}
  union {
    MembersListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MembersListResponseDefaultTypeInternal _MembersListResponse_default_instance_;
PROTOBUF_CONSTEXPR RaftMessage::RaftMessage(
    ::_pbi::ConstantInitialized)
  : raftid_(0u)
  , _oneof_case_{}{}
struct RaftMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftMessageDefaultTypeInternal() {}
  union {
    RaftMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftMessageDefaultTypeInternal _RaftMessage_default_instance_;
}  // namespace raft
static ::_pb::Metadata file_level_metadata_raftmsg_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_raftmsg_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raftmsg_2eproto = nullptr;

const uint32_t TableStruct_raftmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, type_),
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, term_),
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, index_),
  PROTOBUF_FIELD_OFFSET(::raft::LogEntry, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::Peer, raftid_),
  PROTOBUF_FIELD_OFFSET(::raft::Peer, nodeid_),
  PROTOBUF_FIELD_OFFSET(::raft::Peer, ip_),
  PROTOBUF_FIELD_OFFSET(::raft::Peer, port_),
  PROTOBUF_FIELD_OFFSET(::raft::Peer, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, term_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, candidate_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, last_term_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteRequest, last_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::VoteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::VoteResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteResponse, nodeid_),
  PROTOBUF_FIELD_OFFSET(::raft::VoteResponse, agree_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, nodeid_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, term_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, commit_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, prev_log_term_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, prev_log_index_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesRequest, entries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, success_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, nodeid_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, current_index_),
  PROTOBUF_FIELD_OFFSET(::raft::AppendEntriesResponse, first_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::MemberChangeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::MemberChangeRequest, type_),
  PROTOBUF_FIELD_OFFSET(::raft::MemberChangeRequest, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::MemberChangeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::MemberChangeResponse, success_),
  PROTOBUF_FIELD_OFFSET(::raft::MemberChangeResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::MemberChangeResponse, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::MembersListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::MembersListRequest, raftid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::MembersListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::MembersListResponse, success_),
  PROTOBUF_FIELD_OFFSET(::raft::MembersListResponse, term_),
  PROTOBUF_FIELD_OFFSET(::raft::MembersListResponse, raftid_),
  PROTOBUF_FIELD_OFFSET(::raft::MembersListResponse, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::raft::RaftMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::raft::RaftMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::raft::RaftMessage, raftid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::raft::RaftMessage, msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::raft::LogEntry)},
  { 10, -1, -1, sizeof(::raft::Peer)},
  { 21, -1, -1, sizeof(::raft::VoteRequest)},
  { 31, -1, -1, sizeof(::raft::VoteResponse)},
  { 40, -1, -1, sizeof(::raft::AppendEntriesRequest)},
  { 52, -1, -1, sizeof(::raft::AppendEntriesResponse)},
  { 63, -1, -1, sizeof(::raft::MemberChangeRequest)},
  { 71, -1, -1, sizeof(::raft::MemberChangeResponse)},
  { 80, -1, -1, sizeof(::raft::MembersListRequest)},
  { 87, -1, -1, sizeof(::raft::MembersListResponse)},
  { 97, -1, -1, sizeof(::raft::RaftMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::raft::_LogEntry_default_instance_._instance,
  &::raft::_Peer_default_instance_._instance,
  &::raft::_VoteRequest_default_instance_._instance,
  &::raft::_VoteResponse_default_instance_._instance,
  &::raft::_AppendEntriesRequest_default_instance_._instance,
  &::raft::_AppendEntriesResponse_default_instance_._instance,
  &::raft::_MemberChangeRequest_default_instance_._instance,
  &::raft::_MemberChangeResponse_default_instance_._instance,
  &::raft::_MembersListRequest_default_instance_._instance,
  &::raft::_MembersListResponse_default_instance_._instance,
  &::raft::_RaftMessage_default_instance_._instance,
};

const char descriptor_table_protodef_raftmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rraftmsg.proto\022\004raft\"V\n\010LogEntry\022\037\n\004typ"
  "e\030\001 \001(\0162\021.raft.RaftLogType\022\014\n\004term\030\002 \001(\004"
  "\022\r\n\005index\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\"`\n\004Peer\022\016\n"
  "\006raftid\030\001 \001(\005\022\016\n\006nodeid\030\002 \001(\005\022\n\n\002ip\030\003 \001("
  "\t\022\014\n\004port\030\004 \001(\r\022\036\n\005state\030\005 \001(\0162\017.raft.Ra"
  "ftState\"U\n\013VoteRequest\022\014\n\004term\030\001 \001(\004\022\021\n\t"
  "candidate\030\002 \001(\004\022\021\n\tlast_term\030\003 \001(\004\022\022\n\nla"
  "st_index\030\004 \001(\004\";\n\014VoteResponse\022\014\n\004term\030\001"
  " \001(\004\022\016\n\006nodeid\030\002 \001(\005\022\r\n\005agree\030\003 \001(\010\"\224\001\n\024"
  "AppendEntriesRequest\022\016\n\006nodeid\030\001 \001(\005\022\014\n\004"
  "term\030\002 \001(\004\022\016\n\006commit\030\003 \001(\004\022\025\n\rprev_log_t"
  "erm\030\004 \001(\004\022\026\n\016prev_log_index\030\005 \001(\004\022\037\n\007ent"
  "ries\030\006 \003(\0132\016.raft.LogEntry\"r\n\025AppendEntr"
  "iesResponse\022\017\n\007success\030\001 \001(\010\022\016\n\006nodeid\030\002"
  " \001(\005\022\014\n\004term\030\003 \001(\004\022\025\n\rcurrent_index\030\004 \001("
  "\004\022\023\n\013first_index\030\005 \001(\004\"P\n\023MemberChangeRe"
  "quest\022\037\n\004type\030\001 \001(\0162\021.raft.RaftLogType\022\030"
  "\n\004peer\030\002 \001(\0132\n.raft.Peer\"O\n\024MemberChange"
  "Response\022\017\n\007success\030\001 \001(\010\022\014\n\004term\030\002 \001(\004\022"
  "\030\n\004peer\030\003 \001(\0132\n.raft.Peer\"$\n\022MembersList"
  "Request\022\016\n\006raftid\030\001 \001(\004\"_\n\023MembersListRe"
  "sponse\022\017\n\007success\030\001 \001(\010\022\014\n\004term\030\002 \001(\004\022\016\n"
  "\006raftid\030\003 \001(\004\022\031\n\005peers\030\004 \003(\0132\n.raft.Peer"
  "\"\200\003\n\013RaftMessage\022\016\n\006raftid\030\001 \001(\r\022#\n\006vt_r"
  "eq\030\002 \001(\0132\021.raft.VoteRequestH\000\022$\n\006vt_rsp\030"
  "\003 \001(\0132\022.raft.VoteResponseH\000\022,\n\006ae_req\030\004 "
  "\001(\0132\032.raft.AppendEntriesRequestH\000\022-\n\006ae_"
  "rsp\030\005 \001(\0132\033.raft.AppendEntriesResponseH\000"
  "\022+\n\006mc_req\030\006 \001(\0132\031.raft.MemberChangeRequ"
  "estH\000\022,\n\006mc_rsp\030\007 \001(\0132\032.raft.MemberChang"
  "eResponseH\000\022*\n\006ml_req\030\010 \001(\0132\030.raft.Membe"
  "rsListRequestH\000\022+\n\006ml_rsp\030\t \001(\0132\031.raft.M"
  "embersListResponseH\000B\005\n\003msg*M\n\tRaftState"
  "\022\013\n\007UNKNOWN\020\000\022\n\n\006LEADER\020\001\022\014\n\010FOLLOWER\020\002\022"
  "\r\n\tCANDIDATE\020\003\022\n\n\006LEANER\020\004*\212\001\n\013RaftLogTy"
  "pe\022\022\n\016LOGTYPE_NORMAL\020\000\022\036\n\032LOGTYPE_ADD_NO"
  "NVOTING_NODE\020\001\022\024\n\020LOGTYPE_ADD_NODE\020\002\022\027\n\023"
  "LOGTYPE_REMOVE_NODE\020\003\022\030\n\024LOGTYPE_PROMOTE"
  "_NODE\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_raftmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raftmsg_2eproto = {
    false, false, 1535, descriptor_table_protodef_raftmsg_2eproto,
    "raftmsg.proto",
    &descriptor_table_raftmsg_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_raftmsg_2eproto::offsets,
    file_level_metadata_raftmsg_2eproto, file_level_enum_descriptors_raftmsg_2eproto,
    file_level_service_descriptors_raftmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raftmsg_2eproto_getter() {
  return &descriptor_table_raftmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raftmsg_2eproto(&descriptor_table_raftmsg_2eproto);
namespace raft {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaftState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raftmsg_2eproto);
  return file_level_enum_descriptors_raftmsg_2eproto[0];
}
bool RaftState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RaftLogType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raftmsg_2eproto);
  return file_level_enum_descriptors_raftmsg_2eproto[1];
}
bool RaftLogType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&term_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:raft.LogEntry)
}

inline void LogEntry::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&term_)) + sizeof(type_));
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:raft.LogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.LogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&term_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .raft.RaftLogType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::raft::RaftLogType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.LogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftLogType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_term(), target);
  }

  // uint64 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_index(), target);
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.LogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  // .raft.RaftLogType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }

void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogEntry *>(to)->MergeFrom(
      static_cast<const LogEntry &>(from));
}


void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, type_)
      + sizeof(LogEntry::type_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[0]);
}

// ===================================================================

class Peer::_Internal {
 public:
};

Peer::Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&raftid_, &from.raftid_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&raftid_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:raft.Peer)
}

inline void Peer::SharedCtor() {
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&raftid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&raftid_)) + sizeof(state_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:raft.Peer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.Destroy();
}

void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.Peer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&raftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&raftid_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Peer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 raftid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          raftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "raft.Peer.ip"));
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.RaftState state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::raft::RaftState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Peer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.Peer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 raftid = 1;
  if (this->_internal_raftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_raftid(), target);
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodeid(), target);
  }

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "raft.Peer.ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip(), target);
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  // .raft.RaftState state = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.Peer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 3;
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 raftid = 1;
  if (this->_internal_raftid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_raftid());
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nodeid());
  }

  // uint32 port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // .raft.RaftState state = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Peer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Peer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Peer::GetClassData() const { return &_class_data_; }

void Peer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Peer *>(to)->MergeFrom(
      static_cast<const Peer &>(from));
}


void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_raftid() != 0) {
    _internal_set_raftid(from._internal_raftid());
  }
  if (from._internal_nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Peer, state_)
      + sizeof(Peer::state_)
      - PROTOBUF_FIELD_OFFSET(Peer, raftid_)>(
          reinterpret_cast<char*>(&raftid_),
          reinterpret_cast<char*>(&other->raftid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[1]);
}

// ===================================================================

class VoteRequest::_Internal {
 public:
};

VoteRequest::VoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.VoteRequest)
}
VoteRequest::VoteRequest(const VoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_index_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteRequest)
}

inline void VoteRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_index_) -
    reinterpret_cast<char*>(&term_)) + sizeof(last_index_));
}

VoteRequest::~VoteRequest() {
  // @@protoc_insertion_point(destructor:raft.VoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_index_) -
      reinterpret_cast<char*>(&term_)) + sizeof(last_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          candidate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          last_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 last_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          last_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // uint64 candidate = 2;
  if (this->_internal_candidate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_candidate(), target);
  }

  // uint64 last_term = 3;
  if (this->_internal_last_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_term(), target);
  }

  // uint64 last_index = 4;
  if (this->_internal_last_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_last_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteRequest)
  return target;
}

size_t VoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 candidate = 2;
  if (this->_internal_candidate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_candidate());
  }

  // uint64 last_term = 3;
  if (this->_internal_last_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_term());
  }

  // uint64 last_index = 4;
  if (this->_internal_last_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteRequest::GetClassData() const { return &_class_data_; }

void VoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoteRequest *>(to)->MergeFrom(
      static_cast<const VoteRequest &>(from));
}


void VoteRequest::MergeFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_candidate() != 0) {
    _internal_set_candidate(from._internal_candidate());
  }
  if (from._internal_last_term() != 0) {
    _internal_set_last_term(from._internal_last_term());
  }
  if (from._internal_last_index() != 0) {
    _internal_set_last_index(from._internal_last_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteRequest::CopyFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequest::IsInitialized() const {
  return true;
}

void VoteRequest::InternalSwap(VoteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteRequest, last_index_)
      + sizeof(VoteRequest::last_index_)
      - PROTOBUF_FIELD_OFFSET(VoteRequest, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[2]);
}

// ===================================================================

class VoteResponse::_Internal {
 public:
};

VoteResponse::VoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.VoteResponse)
}
VoteResponse::VoteResponse(const VoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&term_)) + sizeof(agree_));
  // @@protoc_insertion_point(copy_constructor:raft.VoteResponse)
}

inline void VoteResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&agree_) -
    reinterpret_cast<char*>(&term_)) + sizeof(agree_));
}

VoteResponse::~VoteResponse() {
  // @@protoc_insertion_point(destructor:raft.VoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VoteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.VoteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agree_) -
      reinterpret_cast<char*>(&term_)) + sizeof(agree_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool agree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          agree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VoteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.VoteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodeid(), target);
  }

  // bool agree = 3;
  if (this->_internal_agree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_agree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.VoteResponse)
  return target;
}

size_t VoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.VoteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nodeid());
  }

  // bool agree = 3;
  if (this->_internal_agree() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteResponse::GetClassData() const { return &_class_data_; }

void VoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VoteResponse *>(to)->MergeFrom(
      static_cast<const VoteResponse &>(from));
}


void VoteResponse::MergeFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.VoteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_agree() != 0) {
    _internal_set_agree(from._internal_agree());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteResponse::CopyFrom(const VoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.VoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteResponse::IsInitialized() const {
  return true;
}

void VoteResponse::InternalSwap(VoteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteResponse, agree_)
      + sizeof(VoteResponse::agree_)
      - PROTOBUF_FIELD_OFFSET(VoteResponse, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[3]);
}

// ===================================================================

class AppendEntriesRequest::_Internal {
 public:
};

AppendEntriesRequest::AppendEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesRequest)
}
AppendEntriesRequest::AppendEntriesRequest(const AppendEntriesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&nodeid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(nodeid_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesRequest)
}

inline void AppendEntriesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&nodeid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(nodeid_));
}

AppendEntriesRequest::~AppendEntriesRequest() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nodeid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(nodeid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 nodeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 commit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 prev_log_term = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          prev_log_term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 prev_log_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          prev_log_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .raft.LogEntry entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 nodeid = 1;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_nodeid(), target);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_term(), target);
  }

  // uint64 commit = 3;
  if (this->_internal_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_commit(), target);
  }

  // uint64 prev_log_term = 4;
  if (this->_internal_prev_log_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_prev_log_term(), target);
  }

  // uint64 prev_log_index = 5;
  if (this->_internal_prev_log_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_prev_log_index(), target);
  }

  // repeated .raft.LogEntry entries = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesRequest)
  return target;
}

size_t AppendEntriesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft.LogEntry entries = 6;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 commit = 3;
  if (this->_internal_commit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_commit());
  }

  // uint64 prev_log_term = 4;
  if (this->_internal_prev_log_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_prev_log_term());
  }

  // uint64 prev_log_index = 5;
  if (this->_internal_prev_log_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_prev_log_index());
  }

  // int32 nodeid = 1;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nodeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesRequest::GetClassData() const { return &_class_data_; }

void AppendEntriesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendEntriesRequest *>(to)->MergeFrom(
      static_cast<const AppendEntriesRequest &>(from));
}


void AppendEntriesRequest::MergeFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_commit() != 0) {
    _internal_set_commit(from._internal_commit());
  }
  if (from._internal_prev_log_term() != 0) {
    _internal_set_prev_log_term(from._internal_prev_log_term());
  }
  if (from._internal_prev_log_index() != 0) {
    _internal_set_prev_log_index(from._internal_prev_log_index());
  }
  if (from._internal_nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesRequest::CopyFrom(const AppendEntriesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesRequest::IsInitialized() const {
  return true;
}

void AppendEntriesRequest::InternalSwap(AppendEntriesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, nodeid_)
      + sizeof(AppendEntriesRequest::nodeid_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesRequest, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[4]);
}

// ===================================================================

class AppendEntriesResponse::_Internal {
 public:
};

AppendEntriesResponse::AppendEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.AppendEntriesResponse)
}
AppendEntriesResponse::AppendEntriesResponse(const AppendEntriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_index_) -
    reinterpret_cast<char*>(&success_)) + sizeof(first_index_));
  // @@protoc_insertion_point(copy_constructor:raft.AppendEntriesResponse)
}

inline void AppendEntriesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_index_) -
    reinterpret_cast<char*>(&success_)) + sizeof(first_index_));
}

AppendEntriesResponse::~AppendEntriesResponse() {
  // @@protoc_insertion_point(destructor:raft.AppendEntriesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AppendEntriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AppendEntriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppendEntriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.AppendEntriesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_index_) -
      reinterpret_cast<char*>(&success_)) + sizeof(first_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppendEntriesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 nodeid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          nodeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 current_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          current_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 first_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          first_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AppendEntriesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.AppendEntriesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_nodeid(), target);
  }

  // uint64 term = 3;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_term(), target);
  }

  // uint64 current_index = 4;
  if (this->_internal_current_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_current_index(), target);
  }

  // uint64 first_index = 5;
  if (this->_internal_first_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_first_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.AppendEntriesResponse)
  return target;
}

size_t AppendEntriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.AppendEntriesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 nodeid = 2;
  if (this->_internal_nodeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_nodeid());
  }

  // uint64 term = 3;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 current_index = 4;
  if (this->_internal_current_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_current_index());
  }

  // uint64 first_index = 5;
  if (this->_internal_first_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_first_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppendEntriesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppendEntriesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppendEntriesResponse::GetClassData() const { return &_class_data_; }

void AppendEntriesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppendEntriesResponse *>(to)->MergeFrom(
      static_cast<const AppendEntriesResponse &>(from));
}


void AppendEntriesResponse::MergeFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.AppendEntriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from._internal_nodeid() != 0) {
    _internal_set_nodeid(from._internal_nodeid());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_current_index() != 0) {
    _internal_set_current_index(from._internal_current_index());
  }
  if (from._internal_first_index() != 0) {
    _internal_set_first_index(from._internal_first_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppendEntriesResponse::CopyFrom(const AppendEntriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.AppendEntriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesResponse::IsInitialized() const {
  return true;
}

void AppendEntriesResponse::InternalSwap(AppendEntriesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, first_index_)
      + sizeof(AppendEntriesResponse::first_index_)
      - PROTOBUF_FIELD_OFFSET(AppendEntriesResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppendEntriesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[5]);
}

// ===================================================================

class MemberChangeRequest::_Internal {
 public:
  static const ::raft::Peer& peer(const MemberChangeRequest* msg);
};

const ::raft::Peer&
MemberChangeRequest::_Internal::peer(const MemberChangeRequest* msg) {
  return *msg->peer_;
}
MemberChangeRequest::MemberChangeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.MemberChangeRequest)
}
MemberChangeRequest::MemberChangeRequest(const MemberChangeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::raft::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:raft.MemberChangeRequest)
}

inline void MemberChangeRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&peer_)) + sizeof(type_));
}

MemberChangeRequest::~MemberChangeRequest() {
  // @@protoc_insertion_point(destructor:raft.MemberChangeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemberChangeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void MemberChangeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MemberChangeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberChangeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .raft.RaftLogType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::raft::RaftLogType>(val));
        } else
          goto handle_unusual;
        continue;
      // .raft.Peer peer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberChangeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.MemberChangeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .raft.RaftLogType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .raft.Peer peer = 2;
  if (this->_internal_has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::peer(this),
        _Internal::peer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MemberChangeRequest)
  return target;
}

size_t MemberChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MemberChangeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft.Peer peer = 2;
  if (this->_internal_has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // .raft.RaftLogType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberChangeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberChangeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberChangeRequest::GetClassData() const { return &_class_data_; }

void MemberChangeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberChangeRequest *>(to)->MergeFrom(
      static_cast<const MemberChangeRequest &>(from));
}


void MemberChangeRequest::MergeFrom(const MemberChangeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.MemberChangeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::raft::Peer::MergeFrom(from._internal_peer());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberChangeRequest::CopyFrom(const MemberChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MemberChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberChangeRequest::IsInitialized() const {
  return true;
}

void MemberChangeRequest::InternalSwap(MemberChangeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemberChangeRequest, type_)
      + sizeof(MemberChangeRequest::type_)
      - PROTOBUF_FIELD_OFFSET(MemberChangeRequest, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberChangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[6]);
}

// ===================================================================

class MemberChangeResponse::_Internal {
 public:
  static const ::raft::Peer& peer(const MemberChangeResponse* msg);
};

const ::raft::Peer&
MemberChangeResponse::_Internal::peer(const MemberChangeResponse* msg) {
  return *msg->peer_;
}
MemberChangeResponse::MemberChangeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.MemberChangeResponse)
}
MemberChangeResponse::MemberChangeResponse(const MemberChangeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_peer()) {
    peer_ = new ::raft::Peer(*from.peer_);
  } else {
    peer_ = nullptr;
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:raft.MemberChangeResponse)
}

inline void MemberChangeResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&peer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&peer_)) + sizeof(success_));
}

MemberChangeResponse::~MemberChangeResponse() {
  // @@protoc_insertion_point(destructor:raft.MemberChangeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemberChangeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete peer_;
}

void MemberChangeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MemberChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MemberChangeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && peer_ != nullptr) {
    delete peer_;
  }
  peer_ = nullptr;
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemberChangeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.Peer peer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemberChangeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.MemberChangeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_term(), target);
  }

  // .raft.Peer peer = 3;
  if (this->_internal_has_peer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::peer(this),
        _Internal::peer(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MemberChangeResponse)
  return target;
}

size_t MemberChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MemberChangeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .raft.Peer peer = 3;
  if (this->_internal_has_peer()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *peer_);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemberChangeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MemberChangeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemberChangeResponse::GetClassData() const { return &_class_data_; }

void MemberChangeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MemberChangeResponse *>(to)->MergeFrom(
      static_cast<const MemberChangeResponse &>(from));
}


void MemberChangeResponse::MergeFrom(const MemberChangeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.MemberChangeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_peer()) {
    _internal_mutable_peer()->::raft::Peer::MergeFrom(from._internal_peer());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemberChangeResponse::CopyFrom(const MemberChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MemberChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberChangeResponse::IsInitialized() const {
  return true;
}

void MemberChangeResponse::InternalSwap(MemberChangeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemberChangeResponse, success_)
      + sizeof(MemberChangeResponse::success_)
      - PROTOBUF_FIELD_OFFSET(MemberChangeResponse, peer_)>(
          reinterpret_cast<char*>(&peer_),
          reinterpret_cast<char*>(&other->peer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemberChangeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[7]);
}

// ===================================================================

class MembersListRequest::_Internal {
 public:
};

MembersListRequest::MembersListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.MembersListRequest)
}
MembersListRequest::MembersListRequest(const MembersListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raftid_ = from.raftid_;
  // @@protoc_insertion_point(copy_constructor:raft.MembersListRequest)
}

inline void MembersListRequest::SharedCtor() {
raftid_ = uint64_t{0u};
}

MembersListRequest::~MembersListRequest() {
  // @@protoc_insertion_point(destructor:raft.MembersListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MembersListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MembersListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MembersListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MembersListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raftid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MembersListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 raftid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          raftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MembersListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.MembersListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 raftid = 1;
  if (this->_internal_raftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_raftid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MembersListRequest)
  return target;
}

size_t MembersListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MembersListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 raftid = 1;
  if (this->_internal_raftid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_raftid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MembersListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MembersListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MembersListRequest::GetClassData() const { return &_class_data_; }

void MembersListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MembersListRequest *>(to)->MergeFrom(
      static_cast<const MembersListRequest &>(from));
}


void MembersListRequest::MergeFrom(const MembersListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.MembersListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_raftid() != 0) {
    _internal_set_raftid(from._internal_raftid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MembersListRequest::CopyFrom(const MembersListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MembersListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MembersListRequest::IsInitialized() const {
  return true;
}

void MembersListRequest::InternalSwap(MembersListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(raftid_, other->raftid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MembersListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[8]);
}

// ===================================================================

class MembersListResponse::_Internal {
 public:
};

MembersListResponse::MembersListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  peers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.MembersListResponse)
}
MembersListResponse::MembersListResponse(const MembersListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:raft.MembersListResponse)
}

inline void MembersListResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&term_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&term_)) + sizeof(success_));
}

MembersListResponse::~MembersListResponse() {
  // @@protoc_insertion_point(destructor:raft.MembersListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MembersListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MembersListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MembersListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.MembersListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&term_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MembersListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 raftid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          raftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .raft.Peer peers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MembersListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.MembersListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_term(), target);
  }

  // uint64 raftid = 3;
  if (this->_internal_raftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_raftid(), target);
  }

  // repeated .raft.Peer peers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_peers_size()); i < n; i++) {
    const auto& repfield = this->_internal_peers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.MembersListResponse)
  return target;
}

size_t MembersListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.MembersListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .raft.Peer peers = 4;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 term = 2;
  if (this->_internal_term() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  // uint64 raftid = 3;
  if (this->_internal_raftid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_raftid());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MembersListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MembersListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MembersListResponse::GetClassData() const { return &_class_data_; }

void MembersListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MembersListResponse *>(to)->MergeFrom(
      static_cast<const MembersListResponse &>(from));
}


void MembersListResponse::MergeFrom(const MembersListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.MembersListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  if (from._internal_raftid() != 0) {
    _internal_set_raftid(from._internal_raftid());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MembersListResponse::CopyFrom(const MembersListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.MembersListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MembersListResponse::IsInitialized() const {
  return true;
}

void MembersListResponse::InternalSwap(MembersListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MembersListResponse, success_)
      + sizeof(MembersListResponse::success_)
      - PROTOBUF_FIELD_OFFSET(MembersListResponse, term_)>(
          reinterpret_cast<char*>(&term_),
          reinterpret_cast<char*>(&other->term_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MembersListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[9]);
}

// ===================================================================

class RaftMessage::_Internal {
 public:
  static const ::raft::VoteRequest& vt_req(const RaftMessage* msg);
  static const ::raft::VoteResponse& vt_rsp(const RaftMessage* msg);
  static const ::raft::AppendEntriesRequest& ae_req(const RaftMessage* msg);
  static const ::raft::AppendEntriesResponse& ae_rsp(const RaftMessage* msg);
  static const ::raft::MemberChangeRequest& mc_req(const RaftMessage* msg);
  static const ::raft::MemberChangeResponse& mc_rsp(const RaftMessage* msg);
  static const ::raft::MembersListRequest& ml_req(const RaftMessage* msg);
  static const ::raft::MembersListResponse& ml_rsp(const RaftMessage* msg);
};

const ::raft::VoteRequest&
RaftMessage::_Internal::vt_req(const RaftMessage* msg) {
  return *msg->msg_.vt_req_;
}
const ::raft::VoteResponse&
RaftMessage::_Internal::vt_rsp(const RaftMessage* msg) {
  return *msg->msg_.vt_rsp_;
}
const ::raft::AppendEntriesRequest&
RaftMessage::_Internal::ae_req(const RaftMessage* msg) {
  return *msg->msg_.ae_req_;
}
const ::raft::AppendEntriesResponse&
RaftMessage::_Internal::ae_rsp(const RaftMessage* msg) {
  return *msg->msg_.ae_rsp_;
}
const ::raft::MemberChangeRequest&
RaftMessage::_Internal::mc_req(const RaftMessage* msg) {
  return *msg->msg_.mc_req_;
}
const ::raft::MemberChangeResponse&
RaftMessage::_Internal::mc_rsp(const RaftMessage* msg) {
  return *msg->msg_.mc_rsp_;
}
const ::raft::MembersListRequest&
RaftMessage::_Internal::ml_req(const RaftMessage* msg) {
  return *msg->msg_.ml_req_;
}
const ::raft::MembersListResponse&
RaftMessage::_Internal::ml_rsp(const RaftMessage* msg) {
  return *msg->msg_.ml_rsp_;
}
void RaftMessage::set_allocated_vt_req(::raft::VoteRequest* vt_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (vt_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vt_req);
    if (message_arena != submessage_arena) {
      vt_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vt_req, submessage_arena);
    }
    set_has_vt_req();
    msg_.vt_req_ = vt_req;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.vt_req)
}
void RaftMessage::set_allocated_vt_rsp(::raft::VoteResponse* vt_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (vt_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vt_rsp);
    if (message_arena != submessage_arena) {
      vt_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vt_rsp, submessage_arena);
    }
    set_has_vt_rsp();
    msg_.vt_rsp_ = vt_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.vt_rsp)
}
void RaftMessage::set_allocated_ae_req(::raft::AppendEntriesRequest* ae_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (ae_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ae_req);
    if (message_arena != submessage_arena) {
      ae_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ae_req, submessage_arena);
    }
    set_has_ae_req();
    msg_.ae_req_ = ae_req;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.ae_req)
}
void RaftMessage::set_allocated_ae_rsp(::raft::AppendEntriesResponse* ae_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (ae_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ae_rsp);
    if (message_arena != submessage_arena) {
      ae_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ae_rsp, submessage_arena);
    }
    set_has_ae_rsp();
    msg_.ae_rsp_ = ae_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.ae_rsp)
}
void RaftMessage::set_allocated_mc_req(::raft::MemberChangeRequest* mc_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (mc_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mc_req);
    if (message_arena != submessage_arena) {
      mc_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mc_req, submessage_arena);
    }
    set_has_mc_req();
    msg_.mc_req_ = mc_req;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.mc_req)
}
void RaftMessage::set_allocated_mc_rsp(::raft::MemberChangeResponse* mc_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (mc_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mc_rsp);
    if (message_arena != submessage_arena) {
      mc_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mc_rsp, submessage_arena);
    }
    set_has_mc_rsp();
    msg_.mc_rsp_ = mc_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.mc_rsp)
}
void RaftMessage::set_allocated_ml_req(::raft::MembersListRequest* ml_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (ml_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ml_req);
    if (message_arena != submessage_arena) {
      ml_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ml_req, submessage_arena);
    }
    set_has_ml_req();
    msg_.ml_req_ = ml_req;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.ml_req)
}
void RaftMessage::set_allocated_ml_rsp(::raft::MembersListResponse* ml_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (ml_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ml_rsp);
    if (message_arena != submessage_arena) {
      ml_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ml_rsp, submessage_arena);
    }
    set_has_ml_rsp();
    msg_.ml_rsp_ = ml_rsp;
  }
  // @@protoc_insertion_point(field_set_allocated:raft.RaftMessage.ml_rsp)
}
RaftMessage::RaftMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:raft.RaftMessage)
}
RaftMessage::RaftMessage(const RaftMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  raftid_ = from.raftid_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kVtReq: {
      _internal_mutable_vt_req()->::raft::VoteRequest::MergeFrom(from._internal_vt_req());
      break;
    }
    case kVtRsp: {
      _internal_mutable_vt_rsp()->::raft::VoteResponse::MergeFrom(from._internal_vt_rsp());
      break;
    }
    case kAeReq: {
      _internal_mutable_ae_req()->::raft::AppendEntriesRequest::MergeFrom(from._internal_ae_req());
      break;
    }
    case kAeRsp: {
      _internal_mutable_ae_rsp()->::raft::AppendEntriesResponse::MergeFrom(from._internal_ae_rsp());
      break;
    }
    case kMcReq: {
      _internal_mutable_mc_req()->::raft::MemberChangeRequest::MergeFrom(from._internal_mc_req());
      break;
    }
    case kMcRsp: {
      _internal_mutable_mc_rsp()->::raft::MemberChangeResponse::MergeFrom(from._internal_mc_rsp());
      break;
    }
    case kMlReq: {
      _internal_mutable_ml_req()->::raft::MembersListRequest::MergeFrom(from._internal_ml_req());
      break;
    }
    case kMlRsp: {
      _internal_mutable_ml_rsp()->::raft::MembersListResponse::MergeFrom(from._internal_ml_rsp());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:raft.RaftMessage)
}

inline void RaftMessage::SharedCtor() {
raftid_ = 0u;
clear_has_msg();
}

RaftMessage::~RaftMessage() {
  // @@protoc_insertion_point(destructor:raft.RaftMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void RaftMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RaftMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:raft.RaftMessage)
  switch (msg_case()) {
    case kVtReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.vt_req_;
      }
      break;
    }
    case kVtRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.vt_rsp_;
      }
      break;
    }
    case kAeReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.ae_req_;
      }
      break;
    }
    case kAeRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.ae_rsp_;
      }
      break;
    }
    case kMcReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.mc_req_;
      }
      break;
    }
    case kMcRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.mc_rsp_;
      }
      break;
    }
    case kMlReq: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.ml_req_;
      }
      break;
    }
    case kMlRsp: {
      if (GetArenaForAllocation() == nullptr) {
        delete msg_.ml_rsp_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void RaftMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:raft.RaftMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raftid_ = 0u;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 raftid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          raftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.VoteRequest vt_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vt_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.VoteResponse vt_rsp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vt_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.AppendEntriesRequest ae_req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ae_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.AppendEntriesResponse ae_rsp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ae_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.MemberChangeRequest mc_req = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mc_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.MemberChangeResponse mc_rsp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mc_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.MembersListRequest ml_req = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ml_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .raft.MembersListResponse ml_rsp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ml_rsp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:raft.RaftMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 raftid = 1;
  if (this->_internal_raftid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_raftid(), target);
  }

  // .raft.VoteRequest vt_req = 2;
  if (_internal_has_vt_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vt_req(this),
        _Internal::vt_req(this).GetCachedSize(), target, stream);
  }

  // .raft.VoteResponse vt_rsp = 3;
  if (_internal_has_vt_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vt_rsp(this),
        _Internal::vt_rsp(this).GetCachedSize(), target, stream);
  }

  // .raft.AppendEntriesRequest ae_req = 4;
  if (_internal_has_ae_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ae_req(this),
        _Internal::ae_req(this).GetCachedSize(), target, stream);
  }

  // .raft.AppendEntriesResponse ae_rsp = 5;
  if (_internal_has_ae_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ae_rsp(this),
        _Internal::ae_rsp(this).GetCachedSize(), target, stream);
  }

  // .raft.MemberChangeRequest mc_req = 6;
  if (_internal_has_mc_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::mc_req(this),
        _Internal::mc_req(this).GetCachedSize(), target, stream);
  }

  // .raft.MemberChangeResponse mc_rsp = 7;
  if (_internal_has_mc_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mc_rsp(this),
        _Internal::mc_rsp(this).GetCachedSize(), target, stream);
  }

  // .raft.MembersListRequest ml_req = 8;
  if (_internal_has_ml_req()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::ml_req(this),
        _Internal::ml_req(this).GetCachedSize(), target, stream);
  }

  // .raft.MembersListResponse ml_rsp = 9;
  if (_internal_has_ml_rsp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::ml_rsp(this),
        _Internal::ml_rsp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:raft.RaftMessage)
  return target;
}

size_t RaftMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:raft.RaftMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 raftid = 1;
  if (this->_internal_raftid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_raftid());
  }

  switch (msg_case()) {
    // .raft.VoteRequest vt_req = 2;
    case kVtReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.vt_req_);
      break;
    }
    // .raft.VoteResponse vt_rsp = 3;
    case kVtRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.vt_rsp_);
      break;
    }
    // .raft.AppendEntriesRequest ae_req = 4;
    case kAeReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ae_req_);
      break;
    }
    // .raft.AppendEntriesResponse ae_rsp = 5;
    case kAeRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ae_rsp_);
      break;
    }
    // .raft.MemberChangeRequest mc_req = 6;
    case kMcReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.mc_req_);
      break;
    }
    // .raft.MemberChangeResponse mc_rsp = 7;
    case kMcRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.mc_rsp_);
      break;
    }
    // .raft.MembersListRequest ml_req = 8;
    case kMlReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ml_req_);
      break;
    }
    // .raft.MembersListResponse ml_rsp = 9;
    case kMlRsp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ml_rsp_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RaftMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftMessage::GetClassData() const { return &_class_data_; }

void RaftMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RaftMessage *>(to)->MergeFrom(
      static_cast<const RaftMessage &>(from));
}


void RaftMessage::MergeFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:raft.RaftMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_raftid() != 0) {
    _internal_set_raftid(from._internal_raftid());
  }
  switch (from.msg_case()) {
    case kVtReq: {
      _internal_mutable_vt_req()->::raft::VoteRequest::MergeFrom(from._internal_vt_req());
      break;
    }
    case kVtRsp: {
      _internal_mutable_vt_rsp()->::raft::VoteResponse::MergeFrom(from._internal_vt_rsp());
      break;
    }
    case kAeReq: {
      _internal_mutable_ae_req()->::raft::AppendEntriesRequest::MergeFrom(from._internal_ae_req());
      break;
    }
    case kAeRsp: {
      _internal_mutable_ae_rsp()->::raft::AppendEntriesResponse::MergeFrom(from._internal_ae_rsp());
      break;
    }
    case kMcReq: {
      _internal_mutable_mc_req()->::raft::MemberChangeRequest::MergeFrom(from._internal_mc_req());
      break;
    }
    case kMcRsp: {
      _internal_mutable_mc_rsp()->::raft::MemberChangeResponse::MergeFrom(from._internal_mc_rsp());
      break;
    }
    case kMlReq: {
      _internal_mutable_ml_req()->::raft::MembersListRequest::MergeFrom(from._internal_ml_req());
      break;
    }
    case kMlRsp: {
      _internal_mutable_ml_rsp()->::raft::MembersListResponse::MergeFrom(from._internal_ml_rsp());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftMessage::CopyFrom(const RaftMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:raft.RaftMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftMessage::IsInitialized() const {
  return true;
}

void RaftMessage::InternalSwap(RaftMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(raftid_, other->raftid_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftmsg_2eproto_getter, &descriptor_table_raftmsg_2eproto_once,
      file_level_metadata_raftmsg_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace raft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::raft::LogEntry*
Arena::CreateMaybeMessage< ::raft::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::Peer*
Arena::CreateMaybeMessage< ::raft::Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::VoteRequest*
Arena::CreateMaybeMessage< ::raft::VoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::VoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::VoteResponse*
Arena::CreateMaybeMessage< ::raft::VoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::VoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::AppendEntriesRequest*
Arena::CreateMaybeMessage< ::raft::AppendEntriesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::AppendEntriesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::AppendEntriesResponse*
Arena::CreateMaybeMessage< ::raft::AppendEntriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::AppendEntriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::MemberChangeRequest*
Arena::CreateMaybeMessage< ::raft::MemberChangeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::MemberChangeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::MemberChangeResponse*
Arena::CreateMaybeMessage< ::raft::MemberChangeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::MemberChangeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::MembersListRequest*
Arena::CreateMaybeMessage< ::raft::MembersListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::MembersListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::MembersListResponse*
Arena::CreateMaybeMessage< ::raft::MembersListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::MembersListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::raft::RaftMessage*
Arena::CreateMaybeMessage< ::raft::RaftMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::raft::RaftMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
